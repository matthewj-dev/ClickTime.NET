// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ClickTime.NET.Models.Patch {
    public class ExpenseItemModel_Manage : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Required when the request does not include an AmountForeignCurrency value or otherwise auto calculated for mileage expense types based on Rate x Quantity.If the request does include an AmountForeignCurrency value then this value is not required and is ignored.</summary>
        public double? Amount { get; set; }
        /// <summary>Required when the request includes an AmountForeignCurrency value or otherwise auto calculated for mileage expense types based on Rate x Quantity.If the request does not include an AmountForeignCurrency value then this value is not required and is ignored.</summary>
        public double? AmountForeign { get; set; }
        /// <summary>3-letter ISO code.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AmountForeignCurrency { get; set; }
#nullable restore
#else
        public string AmountForeignCurrency { get; set; }
#endif
        /// <summary>This property is required when an AmountForeignCurrency value is provided.If the request does not include an AmountForeignCurrency value then this value is not required and is ignored.</summary>
        public double? AmountForeignExchangeRate { get; set; }
        /// <summary>The Billable property</summary>
        public bool? Billable { get; set; }
        /// <summary>The Comment property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Comment { get; set; }
#nullable restore
#else
        public string Comment { get; set; }
#endif
        /// <summary>The Description property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The ExpenseDate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExpenseDate { get; set; }
#nullable restore
#else
        public string ExpenseDate { get; set; }
#endif
        /// <summary>The ExpenseSheetID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExpenseSheetID { get; set; }
#nullable restore
#else
        public string ExpenseSheetID { get; set; }
#endif
        /// <summary>The ExpenseTypeID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExpenseTypeID { get; set; }
#nullable restore
#else
        public string ExpenseTypeID { get; set; }
#endif
        /// <summary>Required if Billable = true or if setting TaskID.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? JobID { get; set; }
#nullable restore
#else
        public string JobID { get; set; }
#endif
        /// <summary>The PaymentTypeID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PaymentTypeID { get; set; }
#nullable restore
#else
        public string PaymentTypeID { get; set; }
#endif
        /// <summary>Required if using a mileage Expense Type.</summary>
        public double? Quantity { get; set; }
        /// <summary>  User requirements:Security Level(s): Admin</summary>
        public double? Rate { get; set; }
        /// <summary>Base-64 encoded image.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Receipt { get; set; }
#nullable restore
#else
        public string Receipt { get; set; }
#endif
        /// <summary>MIME type of the Receipt image. Required if Receipt is set.Supported MIME types include:- &quot;image/jpeg&quot;- &quot;image/x-jpeg&quot;- &quot;image/pjpeg&quot;- &quot;image/png&quot;- &quot;image/x-png&quot;- &quot;image/gif&quot;- &quot;image/x-gif&quot;- &quot;image/tiff&quot;- &quot;image/x-tiff&quot;- &quot;image/bmp&quot;- &quot;image/x-bmp&quot;- &quot;image/pdf&quot;- &quot;application/pdf&quot;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReceiptFileType { get; set; }
#nullable restore
#else
        public string ReceiptFileType { get; set; }
#endif
        /// <summary>Requires JobID to be included as well  Company requirements:Support Tasks on Expenses</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TaskID { get; set; }
#nullable restore
#else
        public string TaskID { get; set; }
#endif
        /// <summary>
        /// Instantiates a new ExpenseItemModel_Manage and sets the default values.
        /// </summary>
        public ExpenseItemModel_Manage() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ExpenseItemModel_Manage CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ExpenseItemModel_Manage();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"Amount", n => { Amount = n.GetDoubleValue(); } },
                {"AmountForeign", n => { AmountForeign = n.GetDoubleValue(); } },
                {"AmountForeignCurrency", n => { AmountForeignCurrency = n.GetStringValue(); } },
                {"AmountForeignExchangeRate", n => { AmountForeignExchangeRate = n.GetDoubleValue(); } },
                {"Billable", n => { Billable = n.GetBoolValue(); } },
                {"Comment", n => { Comment = n.GetStringValue(); } },
                {"Description", n => { Description = n.GetStringValue(); } },
                {"ExpenseDate", n => { ExpenseDate = n.GetStringValue(); } },
                {"ExpenseSheetID", n => { ExpenseSheetID = n.GetStringValue(); } },
                {"ExpenseTypeID", n => { ExpenseTypeID = n.GetStringValue(); } },
                {"JobID", n => { JobID = n.GetStringValue(); } },
                {"PaymentTypeID", n => { PaymentTypeID = n.GetStringValue(); } },
                {"Quantity", n => { Quantity = n.GetDoubleValue(); } },
                {"Rate", n => { Rate = n.GetDoubleValue(); } },
                {"Receipt", n => { Receipt = n.GetStringValue(); } },
                {"ReceiptFileType", n => { ReceiptFileType = n.GetStringValue(); } },
                {"TaskID", n => { TaskID = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("Amount", Amount);
            writer.WriteDoubleValue("AmountForeign", AmountForeign);
            writer.WriteStringValue("AmountForeignCurrency", AmountForeignCurrency);
            writer.WriteDoubleValue("AmountForeignExchangeRate", AmountForeignExchangeRate);
            writer.WriteBoolValue("Billable", Billable);
            writer.WriteStringValue("Comment", Comment);
            writer.WriteStringValue("Description", Description);
            writer.WriteStringValue("ExpenseDate", ExpenseDate);
            writer.WriteStringValue("ExpenseSheetID", ExpenseSheetID);
            writer.WriteStringValue("ExpenseTypeID", ExpenseTypeID);
            writer.WriteStringValue("JobID", JobID);
            writer.WriteStringValue("PaymentTypeID", PaymentTypeID);
            writer.WriteDoubleValue("Quantity", Quantity);
            writer.WriteDoubleValue("Rate", Rate);
            writer.WriteStringValue("Receipt", Receipt);
            writer.WriteStringValue("ReceiptFileType", ReceiptFileType);
            writer.WriteStringValue("TaskID", TaskID);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
