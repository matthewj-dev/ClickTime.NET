// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ClickTime.NET.Models.Post {
    public class NotificationModel_Root : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The Enabled property</summary>
        public bool? Enabled { get; set; }
        /// <summary>The ExcludeEmployees property</summary>
        public bool? ExcludeEmployees { get; set; }
        /// <summary>The NotificationType property</summary>
        public NotificationModel_Root_NotificationType? NotificationType { get; set; }
        /// <summary>The NumOfDays property</summary>
        public int? NumOfDays { get; set; }
        /// <summary>
        /// Instantiates a new NotificationModel_Root and sets the default values.
        /// </summary>
        public NotificationModel_Root() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static NotificationModel_Root CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new NotificationModel_Root();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"Enabled", n => { Enabled = n.GetBoolValue(); } },
                {"ExcludeEmployees", n => { ExcludeEmployees = n.GetBoolValue(); } },
                {"NotificationType", n => { NotificationType = n.GetEnumValue<NotificationModel_Root_NotificationType>(); } },
                {"NumOfDays", n => { NumOfDays = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("Enabled", Enabled);
            writer.WriteBoolValue("ExcludeEmployees", ExcludeEmployees);
            writer.WriteEnumValue<NotificationModel_Root_NotificationType>("NotificationType", NotificationType);
            writer.WriteIntValue("NumOfDays", NumOfDays);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
