// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ClickTime.NET.Models.Get {
    public class OvertimeModel_New : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The CompanyID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CompanyID { get; set; }
#nullable restore
#else
        public string CompanyID { get; set; }
#endif
        /// <summary>The CreatedDate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatedDate { get; set; }
#nullable restore
#else
        public string CreatedDate { get; set; }
#endif
        /// <summary>The EmploymentTypeID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmploymentTypeID { get; set; }
#nullable restore
#else
        public string EmploymentTypeID { get; set; }
#endif
        /// <summary>The ID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ID { get; set; }
#nullable restore
#else
        public string ID { get; set; }
#endif
        /// <summary>The IncludeTimeOff property</summary>
        public bool? IncludeTimeOff { get; set; }
        /// <summary>The IsActive property</summary>
        public bool? IsActive { get; set; }
        /// <summary>The ModifiedDate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ModifiedDate { get; set; }
#nullable restore
#else
        public string ModifiedDate { get; set; }
#endif
        /// <summary>The Notes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Notes { get; set; }
#nullable restore
#else
        public string Notes { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ClickTime.NET.Models.Get.OvertimeRuleModel_OvertimeRules_Get.OvertimeModel_New>? OvertimeRules { get; set; }
#nullable restore
#else
        public List<ClickTime.NET.Models.Get.OvertimeRuleModel_OvertimeRules_Get.OvertimeModel_New> OvertimeRules { get; set; }
#endif
        /// <summary>The RulePreset property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RulePreset { get; set; }
#nullable restore
#else
        public string RulePreset { get; set; }
#endif
        /// <summary>
        /// Instantiates a new OvertimeModel_New and sets the default values.
        /// </summary>
        public OvertimeModel_New() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static OvertimeModel_New CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new OvertimeModel_New();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"CompanyID", n => { CompanyID = n.GetStringValue(); } },
                {"CreatedDate", n => { CreatedDate = n.GetStringValue(); } },
                {"EmploymentTypeID", n => { EmploymentTypeID = n.GetStringValue(); } },
                {"ID", n => { ID = n.GetStringValue(); } },
                {"IncludeTimeOff", n => { IncludeTimeOff = n.GetBoolValue(); } },
                {"IsActive", n => { IsActive = n.GetBoolValue(); } },
                {"ModifiedDate", n => { ModifiedDate = n.GetStringValue(); } },
                {"Notes", n => { Notes = n.GetStringValue(); } },
                {"OvertimeRules", n => { OvertimeRules = n.GetCollectionOfObjectValues<ClickTime.NET.Models.Get.OvertimeRuleModel_OvertimeRules_Get.OvertimeModel_New>(ClickTime.NET.Models.Get.OvertimeRuleModel_OvertimeRules_Get.OvertimeModel_New.CreateFromDiscriminatorValue)?.ToList(); } },
                {"RulePreset", n => { RulePreset = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("CompanyID", CompanyID);
            writer.WriteStringValue("CreatedDate", CreatedDate);
            writer.WriteStringValue("EmploymentTypeID", EmploymentTypeID);
            writer.WriteStringValue("ID", ID);
            writer.WriteBoolValue("IncludeTimeOff", IncludeTimeOff);
            writer.WriteBoolValue("IsActive", IsActive);
            writer.WriteStringValue("ModifiedDate", ModifiedDate);
            writer.WriteStringValue("Notes", Notes);
            writer.WriteCollectionOfObjectValues<ClickTime.NET.Models.Get.OvertimeRuleModel_OvertimeRules_Get.OvertimeModel_New>("OvertimeRules", OvertimeRules);
            writer.WriteStringValue("RulePreset", RulePreset);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
