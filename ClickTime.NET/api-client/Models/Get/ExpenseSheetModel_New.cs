// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ClickTime.NET.Models.Get {
    public class ExpenseSheetModel_New : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The ApprovedByUserID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ApprovedByUserID { get; set; }
#nullable restore
#else
        public string ApprovedByUserID { get; set; }
#endif
        /// <summary>The Check property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Check { get; set; }
#nullable restore
#else
        public string Check { get; set; }
#endif
        /// <summary>The Description property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The EnableForeignCurrency property</summary>
        public bool? EnableForeignCurrency { get; set; }
        /// <summary>The ExpenseSheetDate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExpenseSheetDate { get; set; }
#nullable restore
#else
        public string ExpenseSheetDate { get; set; }
#endif
        /// <summary>The ID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ID { get; set; }
#nullable restore
#else
        public string ID { get; set; }
#endif
        /// <summary>The Paid property</summary>
        public bool? Paid { get; set; }
        /// <summary>The ReimbursableAmount property</summary>
        public double? ReimbursableAmount { get; set; }
        /// <summary>The RejectedByUserID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RejectedByUserID { get; set; }
#nullable restore
#else
        public string RejectedByUserID { get; set; }
#endif
        /// <summary>The Status property</summary>
        public ExpenseSheetModel_New_Status? Status { get; set; }
        /// <summary>The SubmittedByUserID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SubmittedByUserID { get; set; }
#nullable restore
#else
        public string SubmittedByUserID { get; set; }
#endif
        /// <summary>The Title property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>The TotalAmount property</summary>
        public double? TotalAmount { get; set; }
        /// <summary>The TrackingID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TrackingID { get; set; }
#nullable restore
#else
        public string TrackingID { get; set; }
#endif
        /// <summary>The UserID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserID { get; set; }
#nullable restore
#else
        public string UserID { get; set; }
#endif
        /// <summary>
        /// Instantiates a new ExpenseSheetModel_New and sets the default values.
        /// </summary>
        public ExpenseSheetModel_New() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ExpenseSheetModel_New CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ExpenseSheetModel_New();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"ApprovedByUserID", n => { ApprovedByUserID = n.GetStringValue(); } },
                {"Check", n => { Check = n.GetStringValue(); } },
                {"Description", n => { Description = n.GetStringValue(); } },
                {"EnableForeignCurrency", n => { EnableForeignCurrency = n.GetBoolValue(); } },
                {"ExpenseSheetDate", n => { ExpenseSheetDate = n.GetStringValue(); } },
                {"ID", n => { ID = n.GetStringValue(); } },
                {"Paid", n => { Paid = n.GetBoolValue(); } },
                {"ReimbursableAmount", n => { ReimbursableAmount = n.GetDoubleValue(); } },
                {"RejectedByUserID", n => { RejectedByUserID = n.GetStringValue(); } },
                {"Status", n => { Status = n.GetEnumValue<ExpenseSheetModel_New_Status>(); } },
                {"SubmittedByUserID", n => { SubmittedByUserID = n.GetStringValue(); } },
                {"Title", n => { Title = n.GetStringValue(); } },
                {"TotalAmount", n => { TotalAmount = n.GetDoubleValue(); } },
                {"TrackingID", n => { TrackingID = n.GetStringValue(); } },
                {"UserID", n => { UserID = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("ApprovedByUserID", ApprovedByUserID);
            writer.WriteStringValue("Check", Check);
            writer.WriteStringValue("Description", Description);
            writer.WriteBoolValue("EnableForeignCurrency", EnableForeignCurrency);
            writer.WriteStringValue("ExpenseSheetDate", ExpenseSheetDate);
            writer.WriteStringValue("ID", ID);
            writer.WriteBoolValue("Paid", Paid);
            writer.WriteDoubleValue("ReimbursableAmount", ReimbursableAmount);
            writer.WriteStringValue("RejectedByUserID", RejectedByUserID);
            writer.WriteEnumValue<ExpenseSheetModel_New_Status>("Status", Status);
            writer.WriteStringValue("SubmittedByUserID", SubmittedByUserID);
            writer.WriteStringValue("Title", Title);
            writer.WriteDoubleValue("TotalAmount", TotalAmount);
            writer.WriteStringValue("TrackingID", TrackingID);
            writer.WriteStringValue("UserID", UserID);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
