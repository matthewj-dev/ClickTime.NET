// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ClickTime.NET.Models.Get {
    public class AuditLogAction_Root : IAdditionalDataHolder, IParsable {
        /// <summary>The Action property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Action { get; set; }
#nullable restore
#else
        public string Action { get; set; }
#endif
        /// <summary>The ActionComment property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ActionComment { get; set; }
#nullable restore
#else
        public string ActionComment { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The FieldName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FieldName { get; set; }
#nullable restore
#else
        public string FieldName { get; set; }
#endif
        /// <summary>The Item property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Item { get; set; }
#nullable restore
#else
        public string Item { get; set; }
#endif
        /// <summary>The ItemID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ItemID { get; set; }
#nullable restore
#else
        public string ItemID { get; set; }
#endif
        /// <summary>  Request requirements:CTLegacyScramble=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LegacyItemID { get; set; }
#nullable restore
#else
        public string LegacyItemID { get; set; }
#endif
        /// <summary>  Request requirements:CTLegacyScramble=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LegacyNewID { get; set; }
#nullable restore
#else
        public string LegacyNewID { get; set; }
#endif
        /// <summary>  Request requirements:CTLegacyScramble=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LegacyOriginalID { get; set; }
#nullable restore
#else
        public string LegacyOriginalID { get; set; }
#endif
        /// <summary>The LogDate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LogDate { get; set; }
#nullable restore
#else
        public string LogDate { get; set; }
#endif
        /// <summary>The LogID property</summary>
        public int? LogID { get; set; }
        /// <summary>The NewID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NewID { get; set; }
#nullable restore
#else
        public string NewID { get; set; }
#endif
        /// <summary>The NewValue property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NewValue { get; set; }
#nullable restore
#else
        public string NewValue { get; set; }
#endif
        /// <summary>The OriginalID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginalID { get; set; }
#nullable restore
#else
        public string OriginalID { get; set; }
#endif
        /// <summary>The OriginalValue property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginalValue { get; set; }
#nullable restore
#else
        public string OriginalValue { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ClickTime.NET.Models.Get.LogTimesheetModel_Timesheet_Get.AuditLogAction_Root? Timesheet { get; set; }
#nullable restore
#else
        public ClickTime.NET.Models.Get.LogTimesheetModel_Timesheet_Get.AuditLogAction_Root Timesheet { get; set; }
#endif
        /// <summary>The TransactionID property</summary>
        public int? TransactionID { get; set; }
        /// <summary>The UserID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserID { get; set; }
#nullable restore
#else
        public string UserID { get; set; }
#endif
        /// <summary>The UserName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserName { get; set; }
#nullable restore
#else
        public string UserName { get; set; }
#endif
        /// <summary>
        /// Instantiates a new AuditLogAction_Root and sets the default values.
        /// </summary>
        public AuditLogAction_Root() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static AuditLogAction_Root CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new AuditLogAction_Root();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"Action", n => { Action = n.GetStringValue(); } },
                {"ActionComment", n => { ActionComment = n.GetStringValue(); } },
                {"FieldName", n => { FieldName = n.GetStringValue(); } },
                {"Item", n => { Item = n.GetStringValue(); } },
                {"ItemID", n => { ItemID = n.GetStringValue(); } },
                {"LegacyItemID", n => { LegacyItemID = n.GetStringValue(); } },
                {"LegacyNewID", n => { LegacyNewID = n.GetStringValue(); } },
                {"LegacyOriginalID", n => { LegacyOriginalID = n.GetStringValue(); } },
                {"LogDate", n => { LogDate = n.GetStringValue(); } },
                {"LogID", n => { LogID = n.GetIntValue(); } },
                {"NewID", n => { NewID = n.GetStringValue(); } },
                {"NewValue", n => { NewValue = n.GetStringValue(); } },
                {"OriginalID", n => { OriginalID = n.GetStringValue(); } },
                {"OriginalValue", n => { OriginalValue = n.GetStringValue(); } },
                {"Timesheet", n => { Timesheet = n.GetObjectValue<ClickTime.NET.Models.Get.LogTimesheetModel_Timesheet_Get.AuditLogAction_Root>(ClickTime.NET.Models.Get.LogTimesheetModel_Timesheet_Get.AuditLogAction_Root.CreateFromDiscriminatorValue); } },
                {"TransactionID", n => { TransactionID = n.GetIntValue(); } },
                {"UserID", n => { UserID = n.GetStringValue(); } },
                {"UserName", n => { UserName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("Action", Action);
            writer.WriteStringValue("ActionComment", ActionComment);
            writer.WriteStringValue("FieldName", FieldName);
            writer.WriteStringValue("Item", Item);
            writer.WriteStringValue("ItemID", ItemID);
            writer.WriteStringValue("LegacyItemID", LegacyItemID);
            writer.WriteStringValue("LegacyNewID", LegacyNewID);
            writer.WriteStringValue("LegacyOriginalID", LegacyOriginalID);
            writer.WriteStringValue("LogDate", LogDate);
            writer.WriteIntValue("LogID", LogID);
            writer.WriteStringValue("NewID", NewID);
            writer.WriteStringValue("NewValue", NewValue);
            writer.WriteStringValue("OriginalID", OriginalID);
            writer.WriteStringValue("OriginalValue", OriginalValue);
            writer.WriteObjectValue<ClickTime.NET.Models.Get.LogTimesheetModel_Timesheet_Get.AuditLogAction_Root>("Timesheet", Timesheet);
            writer.WriteIntValue("TransactionID", TransactionID);
            writer.WriteStringValue("UserID", UserID);
            writer.WriteStringValue("UserName", UserName);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
