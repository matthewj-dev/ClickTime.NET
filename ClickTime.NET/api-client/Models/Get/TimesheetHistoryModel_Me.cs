// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ClickTime.NET.Models.Get {
    public class TimesheetHistoryModel_Me : IAdditionalDataHolder, IParsable {
        /// <summary>The Action property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Action { get; set; }
#nullable restore
#else
        public string Action { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ClickTime.NET.Models.Get.BasicUserModel_ActionByUser_Get.TimesheetHistoryModel_Me? ActionByUser { get; set; }
#nullable restore
#else
        public ClickTime.NET.Models.Get.BasicUserModel_ActionByUser_Get.TimesheetHistoryModel_Me ActionByUser { get; set; }
#endif
        /// <summary>The ActionByUserID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ActionByUserID { get; set; }
#nullable restore
#else
        public string ActionByUserID { get; set; }
#endif
        /// <summary>The ActionByUserName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ActionByUserName { get; set; }
#nullable restore
#else
        public string ActionByUserName { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The Comment property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Comment { get; set; }
#nullable restore
#else
        public string Comment { get; set; }
#endif
        /// <summary>The Date property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Date { get; set; }
#nullable restore
#else
        public string Date { get; set; }
#endif
        /// <summary>The HasAttestation property</summary>
        public bool? HasAttestation { get; set; }
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ClickTime.NET.Models.Get.BasicJobModel_Job_Get.TimesheetHistoryModel_Me? Job { get; set; }
#nullable restore
#else
        public ClickTime.NET.Models.Get.BasicJobModel_Job_Get.TimesheetHistoryModel_Me Job { get; set; }
#endif
        /// <summary>The JobID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? JobID { get; set; }
#nullable restore
#else
        public string JobID { get; set; }
#endif
        /// <summary>The JobStatus property</summary>
        public TimesheetHistoryModel_Me_JobStatus? JobStatus { get; set; }
        /// <summary>
        /// Instantiates a new TimesheetHistoryModel_Me and sets the default values.
        /// </summary>
        public TimesheetHistoryModel_Me() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static TimesheetHistoryModel_Me CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new TimesheetHistoryModel_Me();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"Action", n => { Action = n.GetStringValue(); } },
                {"ActionByUser", n => { ActionByUser = n.GetObjectValue<ClickTime.NET.Models.Get.BasicUserModel_ActionByUser_Get.TimesheetHistoryModel_Me>(ClickTime.NET.Models.Get.BasicUserModel_ActionByUser_Get.TimesheetHistoryModel_Me.CreateFromDiscriminatorValue); } },
                {"ActionByUserID", n => { ActionByUserID = n.GetStringValue(); } },
                {"ActionByUserName", n => { ActionByUserName = n.GetStringValue(); } },
                {"Comment", n => { Comment = n.GetStringValue(); } },
                {"Date", n => { Date = n.GetStringValue(); } },
                {"HasAttestation", n => { HasAttestation = n.GetBoolValue(); } },
                {"Job", n => { Job = n.GetObjectValue<ClickTime.NET.Models.Get.BasicJobModel_Job_Get.TimesheetHistoryModel_Me>(ClickTime.NET.Models.Get.BasicJobModel_Job_Get.TimesheetHistoryModel_Me.CreateFromDiscriminatorValue); } },
                {"JobID", n => { JobID = n.GetStringValue(); } },
                {"JobStatus", n => { JobStatus = n.GetEnumValue<TimesheetHistoryModel_Me_JobStatus>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("Action", Action);
            writer.WriteObjectValue<ClickTime.NET.Models.Get.BasicUserModel_ActionByUser_Get.TimesheetHistoryModel_Me>("ActionByUser", ActionByUser);
            writer.WriteStringValue("ActionByUserID", ActionByUserID);
            writer.WriteStringValue("ActionByUserName", ActionByUserName);
            writer.WriteStringValue("Comment", Comment);
            writer.WriteStringValue("Date", Date);
            writer.WriteBoolValue("HasAttestation", HasAttestation);
            writer.WriteObjectValue<ClickTime.NET.Models.Get.BasicJobModel_Job_Get.TimesheetHistoryModel_Me>("Job", Job);
            writer.WriteStringValue("JobID", JobID);
            writer.WriteEnumValue<TimesheetHistoryModel_Me_JobStatus>("JobStatus", JobStatus);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
