// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ClickTime.NET.Models.Get {
    public class ExpenseSheetModel_Root : IAdditionalDataHolder, IParsable {
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ActionModelExpenseSheetAction>? Actions { get; set; }
#nullable restore
#else
        public List<ActionModelExpenseSheetAction> Actions { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ApprovedBy { get; set; }
#nullable restore
#else
        public string ApprovedBy { get; set; }
#endif
        /// <summary>The ApprovedByUserID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ApprovedByUserID { get; set; }
#nullable restore
#else
        public string ApprovedByUserID { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ApprovedDate { get; set; }
#nullable restore
#else
        public string ApprovedDate { get; set; }
#endif
        /// <summary>The Check property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Check { get; set; }
#nullable restore
#else
        public string Check { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Comment { get; set; }
#nullable restore
#else
        public string Comment { get; set; }
#endif
        /// <summary>The Description property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The EnableForeignCurrency property</summary>
        public bool? EnableForeignCurrency { get; set; }
        /// <summary>  Request requirements:Verbose=true</summary>
        public int? ExpenseItemCount { get; set; }
        /// <summary>The ExpenseSheetDate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExpenseSheetDate { get; set; }
#nullable restore
#else
        public string ExpenseSheetDate { get; set; }
#endif
        /// <summary>The ID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ID { get; set; }
#nullable restore
#else
        public string ID { get; set; }
#endif
        /// <summary>  Request requirements:CTLegacyScramble=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LegacyID { get; set; }
#nullable restore
#else
        public string LegacyID { get; set; }
#endif
        /// <summary>The Paid property</summary>
        public bool? Paid { get; set; }
        /// <summary>The ReimbursableAmount property</summary>
        public double? ReimbursableAmount { get; set; }
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RejectedBy { get; set; }
#nullable restore
#else
        public string RejectedBy { get; set; }
#endif
        /// <summary>The RejectedByUserID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RejectedByUserID { get; set; }
#nullable restore
#else
        public string RejectedByUserID { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RejectedDate { get; set; }
#nullable restore
#else
        public string RejectedDate { get; set; }
#endif
        /// <summary>The Status property</summary>
        public ExpenseSheetModel_Root_Status? Status { get; set; }
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SubmittedBy { get; set; }
#nullable restore
#else
        public string SubmittedBy { get; set; }
#endif
        /// <summary>The SubmittedByUserID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SubmittedByUserID { get; set; }
#nullable restore
#else
        public string SubmittedByUserID { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SubmittedDate { get; set; }
#nullable restore
#else
        public string SubmittedDate { get; set; }
#endif
        /// <summary>The Title property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>The TotalAmount property</summary>
        public double? TotalAmount { get; set; }
        /// <summary>The TrackingID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TrackingID { get; set; }
#nullable restore
#else
        public string TrackingID { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ClickTime.NET.Models.Get.BasicUserModel_User_Get.ExpenseSheetModel_Root? User { get; set; }
#nullable restore
#else
        public ClickTime.NET.Models.Get.BasicUserModel_User_Get.ExpenseSheetModel_Root User { get; set; }
#endif
        /// <summary>The UserID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserID { get; set; }
#nullable restore
#else
        public string UserID { get; set; }
#endif
        /// <summary>
        /// Instantiates a new ExpenseSheetModel_Root and sets the default values.
        /// </summary>
        public ExpenseSheetModel_Root() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ExpenseSheetModel_Root CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ExpenseSheetModel_Root();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"Actions", n => { Actions = n.GetCollectionOfObjectValues<ActionModelExpenseSheetAction>(ActionModelExpenseSheetAction.CreateFromDiscriminatorValue)?.ToList(); } },
                {"ApprovedBy", n => { ApprovedBy = n.GetStringValue(); } },
                {"ApprovedByUserID", n => { ApprovedByUserID = n.GetStringValue(); } },
                {"ApprovedDate", n => { ApprovedDate = n.GetStringValue(); } },
                {"Check", n => { Check = n.GetStringValue(); } },
                {"Comment", n => { Comment = n.GetStringValue(); } },
                {"Description", n => { Description = n.GetStringValue(); } },
                {"EnableForeignCurrency", n => { EnableForeignCurrency = n.GetBoolValue(); } },
                {"ExpenseItemCount", n => { ExpenseItemCount = n.GetIntValue(); } },
                {"ExpenseSheetDate", n => { ExpenseSheetDate = n.GetStringValue(); } },
                {"ID", n => { ID = n.GetStringValue(); } },
                {"LegacyID", n => { LegacyID = n.GetStringValue(); } },
                {"Paid", n => { Paid = n.GetBoolValue(); } },
                {"ReimbursableAmount", n => { ReimbursableAmount = n.GetDoubleValue(); } },
                {"RejectedBy", n => { RejectedBy = n.GetStringValue(); } },
                {"RejectedByUserID", n => { RejectedByUserID = n.GetStringValue(); } },
                {"RejectedDate", n => { RejectedDate = n.GetStringValue(); } },
                {"Status", n => { Status = n.GetEnumValue<ExpenseSheetModel_Root_Status>(); } },
                {"SubmittedBy", n => { SubmittedBy = n.GetStringValue(); } },
                {"SubmittedByUserID", n => { SubmittedByUserID = n.GetStringValue(); } },
                {"SubmittedDate", n => { SubmittedDate = n.GetStringValue(); } },
                {"Title", n => { Title = n.GetStringValue(); } },
                {"TotalAmount", n => { TotalAmount = n.GetDoubleValue(); } },
                {"TrackingID", n => { TrackingID = n.GetStringValue(); } },
                {"User", n => { User = n.GetObjectValue<ClickTime.NET.Models.Get.BasicUserModel_User_Get.ExpenseSheetModel_Root>(ClickTime.NET.Models.Get.BasicUserModel_User_Get.ExpenseSheetModel_Root.CreateFromDiscriminatorValue); } },
                {"UserID", n => { UserID = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<ActionModelExpenseSheetAction>("Actions", Actions);
            writer.WriteStringValue("ApprovedBy", ApprovedBy);
            writer.WriteStringValue("ApprovedByUserID", ApprovedByUserID);
            writer.WriteStringValue("ApprovedDate", ApprovedDate);
            writer.WriteStringValue("Check", Check);
            writer.WriteStringValue("Comment", Comment);
            writer.WriteStringValue("Description", Description);
            writer.WriteBoolValue("EnableForeignCurrency", EnableForeignCurrency);
            writer.WriteIntValue("ExpenseItemCount", ExpenseItemCount);
            writer.WriteStringValue("ExpenseSheetDate", ExpenseSheetDate);
            writer.WriteStringValue("ID", ID);
            writer.WriteStringValue("LegacyID", LegacyID);
            writer.WriteBoolValue("Paid", Paid);
            writer.WriteDoubleValue("ReimbursableAmount", ReimbursableAmount);
            writer.WriteStringValue("RejectedBy", RejectedBy);
            writer.WriteStringValue("RejectedByUserID", RejectedByUserID);
            writer.WriteStringValue("RejectedDate", RejectedDate);
            writer.WriteEnumValue<ExpenseSheetModel_Root_Status>("Status", Status);
            writer.WriteStringValue("SubmittedBy", SubmittedBy);
            writer.WriteStringValue("SubmittedByUserID", SubmittedByUserID);
            writer.WriteStringValue("SubmittedDate", SubmittedDate);
            writer.WriteStringValue("Title", Title);
            writer.WriteDoubleValue("TotalAmount", TotalAmount);
            writer.WriteStringValue("TrackingID", TrackingID);
            writer.WriteObjectValue<ClickTime.NET.Models.Get.BasicUserModel_User_Get.ExpenseSheetModel_Root>("User", User);
            writer.WriteStringValue("UserID", UserID);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
