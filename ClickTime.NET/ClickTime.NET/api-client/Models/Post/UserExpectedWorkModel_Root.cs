// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ClickTime.NET.Models.Post {
    public class UserExpectedWorkModel_Root : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The BillingGoalPercentage property</summary>
        public int? BillingGoalPercentage { get; set; }
        /// <summary>The ExpectedHoursFriday property</summary>
        public double? ExpectedHoursFriday { get; set; }
        /// <summary>The ExpectedHoursMonday property</summary>
        public double? ExpectedHoursMonday { get; set; }
        /// <summary>The ExpectedHoursSaturday property</summary>
        public double? ExpectedHoursSaturday { get; set; }
        /// <summary>The ExpectedHoursSunday property</summary>
        public double? ExpectedHoursSunday { get; set; }
        /// <summary>The ExpectedHoursThursday property</summary>
        public double? ExpectedHoursThursday { get; set; }
        /// <summary>The ExpectedHoursTuesday property</summary>
        public double? ExpectedHoursTuesday { get; set; }
        /// <summary>The ExpectedHoursWednesday property</summary>
        public double? ExpectedHoursWednesday { get; set; }
        /// <summary>The SubjectToBillingGoal property</summary>
        public bool? SubjectToBillingGoal { get; set; }
        /// <summary>
        /// Instantiates a new UserExpectedWorkModel_Root and sets the default values.
        /// </summary>
        public UserExpectedWorkModel_Root() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static UserExpectedWorkModel_Root CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new UserExpectedWorkModel_Root();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"BillingGoalPercentage", n => { BillingGoalPercentage = n.GetIntValue(); } },
                {"ExpectedHoursFriday", n => { ExpectedHoursFriday = n.GetDoubleValue(); } },
                {"ExpectedHoursMonday", n => { ExpectedHoursMonday = n.GetDoubleValue(); } },
                {"ExpectedHoursSaturday", n => { ExpectedHoursSaturday = n.GetDoubleValue(); } },
                {"ExpectedHoursSunday", n => { ExpectedHoursSunday = n.GetDoubleValue(); } },
                {"ExpectedHoursThursday", n => { ExpectedHoursThursday = n.GetDoubleValue(); } },
                {"ExpectedHoursTuesday", n => { ExpectedHoursTuesday = n.GetDoubleValue(); } },
                {"ExpectedHoursWednesday", n => { ExpectedHoursWednesday = n.GetDoubleValue(); } },
                {"SubjectToBillingGoal", n => { SubjectToBillingGoal = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("BillingGoalPercentage", BillingGoalPercentage);
            writer.WriteDoubleValue("ExpectedHoursFriday", ExpectedHoursFriday);
            writer.WriteDoubleValue("ExpectedHoursMonday", ExpectedHoursMonday);
            writer.WriteDoubleValue("ExpectedHoursSaturday", ExpectedHoursSaturday);
            writer.WriteDoubleValue("ExpectedHoursSunday", ExpectedHoursSunday);
            writer.WriteDoubleValue("ExpectedHoursThursday", ExpectedHoursThursday);
            writer.WriteDoubleValue("ExpectedHoursTuesday", ExpectedHoursTuesday);
            writer.WriteDoubleValue("ExpectedHoursWednesday", ExpectedHoursWednesday);
            writer.WriteBoolValue("SubjectToBillingGoal", SubjectToBillingGoal);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
