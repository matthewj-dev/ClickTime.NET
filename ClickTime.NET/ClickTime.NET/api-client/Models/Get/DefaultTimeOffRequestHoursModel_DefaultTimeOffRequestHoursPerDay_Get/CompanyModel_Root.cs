// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ClickTime.NET.Models.Get.DefaultTimeOffRequestHoursModel_DefaultTimeOffRequestHoursPerDay_Get {
    /// <summary>
    ///   Company requirements:Optional module(s): Time Off Management
    /// </summary>
    public class CompanyModel_Root : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The Friday property</summary>
        public double? Friday { get; set; }
        /// <summary>The Monday property</summary>
        public double? Monday { get; set; }
        /// <summary>The Saturday property</summary>
        public double? Saturday { get; set; }
        /// <summary>The Sunday property</summary>
        public double? Sunday { get; set; }
        /// <summary>The Thursday property</summary>
        public double? Thursday { get; set; }
        /// <summary>The Tuesday property</summary>
        public double? Tuesday { get; set; }
        /// <summary>The Wednesday property</summary>
        public double? Wednesday { get; set; }
        /// <summary>
        /// Instantiates a new CompanyModel_Root and sets the default values.
        /// </summary>
        public CompanyModel_Root() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static CompanyModel_Root CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new CompanyModel_Root();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"Friday", n => { Friday = n.GetDoubleValue(); } },
                {"Monday", n => { Monday = n.GetDoubleValue(); } },
                {"Saturday", n => { Saturday = n.GetDoubleValue(); } },
                {"Sunday", n => { Sunday = n.GetDoubleValue(); } },
                {"Thursday", n => { Thursday = n.GetDoubleValue(); } },
                {"Tuesday", n => { Tuesday = n.GetDoubleValue(); } },
                {"Wednesday", n => { Wednesday = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("Friday", Friday);
            writer.WriteDoubleValue("Monday", Monday);
            writer.WriteDoubleValue("Saturday", Saturday);
            writer.WriteDoubleValue("Sunday", Sunday);
            writer.WriteDoubleValue("Thursday", Thursday);
            writer.WriteDoubleValue("Tuesday", Tuesday);
            writer.WriteDoubleValue("Wednesday", Wednesday);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
