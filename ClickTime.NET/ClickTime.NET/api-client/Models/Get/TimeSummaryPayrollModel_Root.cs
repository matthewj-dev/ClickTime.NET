// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ClickTime.NET.Models.Get {
    public class TimeSummaryPayrollModel_Root : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The EmploymentTypeID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmploymentTypeID { get; set; }
#nullable restore
#else
        public string EmploymentTypeID { get; set; }
#endif
        /// <summary>EndDate refers to the end date of the latest Timesheet included in each User response.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EndDate { get; set; }
#nullable restore
#else
        public string EndDate { get; set; }
#endif
        /// <summary>The Name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The Overtime property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<TimeSummaryPayrollOvertimeModel>? Overtime { get; set; }
#nullable restore
#else
        public List<TimeSummaryPayrollOvertimeModel> Overtime { get; set; }
#endif
        /// <summary>The RegularTime property</summary>
        public double? RegularTime { get; set; }
        /// <summary>StartDate refers to the start date of the earliest Timesheet included in each User response.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StartDate { get; set; }
#nullable restore
#else
        public string StartDate { get; set; }
#endif
        /// <summary>The TimeOff property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<TimeSummaryPayrollTimeOffModel>? TimeOff { get; set; }
#nullable restore
#else
        public List<TimeSummaryPayrollTimeOffModel> TimeOff { get; set; }
#endif
        /// <summary>The TotalHours property</summary>
        public double? TotalHours { get; set; }
        /// <summary>The UserID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserID { get; set; }
#nullable restore
#else
        public string UserID { get; set; }
#endif
        /// <summary>
        /// Instantiates a new TimeSummaryPayrollModel_Root and sets the default values.
        /// </summary>
        public TimeSummaryPayrollModel_Root() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static TimeSummaryPayrollModel_Root CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new TimeSummaryPayrollModel_Root();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"EmploymentTypeID", n => { EmploymentTypeID = n.GetStringValue(); } },
                {"EndDate", n => { EndDate = n.GetStringValue(); } },
                {"Name", n => { Name = n.GetStringValue(); } },
                {"Overtime", n => { Overtime = n.GetCollectionOfObjectValues<TimeSummaryPayrollOvertimeModel>(TimeSummaryPayrollOvertimeModel.CreateFromDiscriminatorValue)?.ToList(); } },
                {"RegularTime", n => { RegularTime = n.GetDoubleValue(); } },
                {"StartDate", n => { StartDate = n.GetStringValue(); } },
                {"TimeOff", n => { TimeOff = n.GetCollectionOfObjectValues<TimeSummaryPayrollTimeOffModel>(TimeSummaryPayrollTimeOffModel.CreateFromDiscriminatorValue)?.ToList(); } },
                {"TotalHours", n => { TotalHours = n.GetDoubleValue(); } },
                {"UserID", n => { UserID = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("EmploymentTypeID", EmploymentTypeID);
            writer.WriteStringValue("EndDate", EndDate);
            writer.WriteStringValue("Name", Name);
            writer.WriteCollectionOfObjectValues<TimeSummaryPayrollOvertimeModel>("Overtime", Overtime);
            writer.WriteDoubleValue("RegularTime", RegularTime);
            writer.WriteStringValue("StartDate", StartDate);
            writer.WriteCollectionOfObjectValues<TimeSummaryPayrollTimeOffModel>("TimeOff", TimeOff);
            writer.WriteDoubleValue("TotalHours", TotalHours);
            writer.WriteStringValue("UserID", UserID);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
