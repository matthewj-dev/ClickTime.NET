// <auto-generated/>
using ClickTime.NET.Generated.Jobs.Item.JobPhase.Item;
using ClickTime.NET.Generated.Models.Post;
using ClickTime.NET.Generated.Models.ResponseBodyGet;
using ClickTime.NET.Generated.Models.ResponseBodyListGet;
using ClickTime.NET.Generated.Models;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace ClickTime.NET.Generated.Jobs.Item.JobPhase {
    /// <summary>
    /// Builds and executes requests for operations under \Jobs\{jobID}\JobPhase
    /// </summary>
    public class JobPhaseRequestBuilder : BaseRequestBuilder {
        /// <summary>Gets an item from the ClickTime.NET.Generated.Jobs.item.JobPhase.item collection</summary>
        /// <param name="position">    Required</param>
        public WithJobPhaseItemRequestBuilder this[string position] { get {
            var urlTplParams = new Dictionary<string, object>(PathParameters);
            urlTplParams.Add("jobPhaseID", position);
            return new WithJobPhaseItemRequestBuilder(urlTplParams, RequestAdapter);
        } }
        /// <summary>
        /// Instantiates a new JobPhaseRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public JobPhaseRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/Jobs/{jobID}/JobPhase{?ID*,IsOpen*,JobPhaseName*}", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new JobPhaseRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public JobPhaseRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/Jobs/{jobID}/JobPhase{?ID*,IsOpen*,JobPhaseName*}", rawUrl) {
        }
        /// <summary>
        ///   Company requirements:Company must have the SubJob optional module enabled with at least 1 level(s) of subjobs  User requirements:Admin, or Manager with permissions to View Jobs (all Jobs).---# Sort Order:1. ListDisplayText1. ID
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<ClickTime.NET.Generated.Models.ResponseBodyListGet.JobPhaseModel_Root?> GetAsync(Action<RequestConfiguration<JobPhaseRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<ClickTime.NET.Generated.Models.ResponseBodyListGet.JobPhaseModel_Root> GetAsync(Action<RequestConfiguration<JobPhaseRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                {"403", APIError.CreateFromDiscriminatorValue},
            };
            return await RequestAdapter.SendAsync<ClickTime.NET.Generated.Models.ResponseBodyListGet.JobPhaseModel_Root>(requestInfo, ClickTime.NET.Generated.Models.ResponseBodyListGet.JobPhaseModel_Root.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        ///   Company requirements:Company must have the SubJob optional module enabled with at least 1 level(s) of subjobs  User requirements:Admin, or Manager with permissions to Add/Edit Jobs (all Jobs).
        /// </summary>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<ClickTime.NET.Generated.Models.ResponseBodyGet.JobPhaseModel_Root?> PostAsync(ClickTime.NET.Generated.Models.Post.JobPhaseModel_Root body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<ClickTime.NET.Generated.Models.ResponseBodyGet.JobPhaseModel_Root> PostAsync(ClickTime.NET.Generated.Models.Post.JobPhaseModel_Root body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                {"403", APIError.CreateFromDiscriminatorValue},
            };
            return await RequestAdapter.SendAsync<ClickTime.NET.Generated.Models.ResponseBodyGet.JobPhaseModel_Root>(requestInfo, ClickTime.NET.Generated.Models.ResponseBodyGet.JobPhaseModel_Root.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        ///   Company requirements:Company must have the SubJob optional module enabled with at least 1 level(s) of subjobs  User requirements:Admin, or Manager with permissions to View Jobs (all Jobs).---# Sort Order:1. ListDisplayText1. ID
        /// </summary>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<JobPhaseRequestBuilderGetQueryParameters>>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<JobPhaseRequestBuilderGetQueryParameters>> requestConfiguration = default) {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        ///   Company requirements:Company must have the SubJob optional module enabled with at least 1 level(s) of subjobs  User requirements:Admin, or Manager with permissions to Add/Edit Jobs (all Jobs).
        /// </summary>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(ClickTime.NET.Generated.Models.Post.JobPhaseModel_Root body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(ClickTime.NET.Generated.Models.Post.JobPhaseModel_Root body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default) {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public JobPhaseRequestBuilder WithUrl(string rawUrl) {
            return new JobPhaseRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        ///   Company requirements:Company must have the SubJob optional module enabled with at least 1 level(s) of subjobs  User requirements:Admin, or Manager with permissions to View Jobs (all Jobs).---# Sort Order:1. ListDisplayText1. ID
        /// </summary>
        public class JobPhaseRequestBuilderGetQueryParameters {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string[]? ID { get; set; }
#nullable restore
#else
            public string[] ID { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public bool?[]? IsOpen { get; set; }
#nullable restore
#else
            public bool?[] IsOpen { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string[]? JobPhaseName { get; set; }
#nullable restore
#else
            public string[] JobPhaseName { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class JobPhaseRequestBuilderGetRequestConfiguration : RequestConfiguration<JobPhaseRequestBuilderGetQueryParameters> {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class JobPhaseRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters> {
        }
    }
}
