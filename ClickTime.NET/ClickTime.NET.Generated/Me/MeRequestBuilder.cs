// <auto-generated/>
using ClickTime.NET.Generated.Me.AlternativeTimeOff;
using ClickTime.NET.Generated.Me.AlternativeTimeOffTypes;
using ClickTime.NET.Generated.Me.Clients;
using ClickTime.NET.Generated.Me.Currencies;
using ClickTime.NET.Generated.Me.ExpenseItems;
using ClickTime.NET.Generated.Me.ExpenseSheets;
using ClickTime.NET.Generated.Me.FirebaseDevice;
using ClickTime.NET.Generated.Me.HolidayEntries;
using ClickTime.NET.Generated.Me.Jobs;
using ClickTime.NET.Generated.Me.Reports;
using ClickTime.NET.Generated.Me.ResetAuthToken;
using ClickTime.NET.Generated.Me.Services;
using ClickTime.NET.Generated.Me.Tasks;
using ClickTime.NET.Generated.Me.TimeEntries;
using ClickTime.NET.Generated.Me.TimeOff;
using ClickTime.NET.Generated.Me.TimeOffRequests;
using ClickTime.NET.Generated.Me.TimeOffTypes;
using ClickTime.NET.Generated.Me.Timers;
using ClickTime.NET.Generated.Me.Timesheets;
using ClickTime.NET.Generated.Models.Patch;
using ClickTime.NET.Generated.Models.ResponseBodyGet;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace ClickTime.NET.Generated.Me {
    /// <summary>
    /// Builds and executes requests for operations under \Me
    /// </summary>
    public class MeRequestBuilder : BaseRequestBuilder {
        /// <summary>The AlternativeTimeOff property</summary>
        public AlternativeTimeOffRequestBuilder AlternativeTimeOff { get =>
            new AlternativeTimeOffRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The AlternativeTimeOffTypes property</summary>
        public AlternativeTimeOffTypesRequestBuilder AlternativeTimeOffTypes { get =>
            new AlternativeTimeOffTypesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The Clients property</summary>
        public ClientsRequestBuilder Clients { get =>
            new ClientsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The Currencies property</summary>
        public CurrenciesRequestBuilder Currencies { get =>
            new CurrenciesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The ExpenseItems property</summary>
        public ExpenseItemsRequestBuilder ExpenseItems { get =>
            new ExpenseItemsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The ExpenseSheets property</summary>
        public ExpenseSheetsRequestBuilder ExpenseSheets { get =>
            new ExpenseSheetsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The FirebaseDevice property</summary>
        public FirebaseDeviceRequestBuilder FirebaseDevice { get =>
            new FirebaseDeviceRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The HolidayEntries property</summary>
        public HolidayEntriesRequestBuilder HolidayEntries { get =>
            new HolidayEntriesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The Jobs property</summary>
        public JobsRequestBuilder Jobs { get =>
            new JobsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The Reports property</summary>
        public ReportsRequestBuilder Reports { get =>
            new ReportsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The ResetAuthToken property</summary>
        public ResetAuthTokenRequestBuilder ResetAuthToken { get =>
            new ResetAuthTokenRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The Services property</summary>
        public ServicesRequestBuilder Services { get =>
            new ServicesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The Tasks property</summary>
        public TasksRequestBuilder Tasks { get =>
            new TasksRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The TimeEntries property</summary>
        public TimeEntriesRequestBuilder TimeEntries { get =>
            new TimeEntriesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The TimeOff property</summary>
        public TimeOffRequestBuilder TimeOff { get =>
            new TimeOffRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The TimeOffRequests property</summary>
        public TimeOffRequestsRequestBuilder TimeOffRequests { get =>
            new TimeOffRequestsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The TimeOffTypes property</summary>
        public TimeOffTypesRequestBuilder TimeOffTypes { get =>
            new TimeOffTypesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The Timers property</summary>
        public TimersRequestBuilder Timers { get =>
            new TimersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The Timesheets property</summary>
        public TimesheetsRequestBuilder Timesheets { get =>
            new TimesheetsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new MeRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MeRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/Me", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new MeRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MeRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/Me", rawUrl) {
        }
        /// <summary>
        /// Get the current User.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<ClickTime.NET.Generated.Models.ResponseBodyGet.UserModel_Me?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<ClickTime.NET.Generated.Models.ResponseBodyGet.UserModel_Me> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<ClickTime.NET.Generated.Models.ResponseBodyGet.UserModel_Me>(requestInfo, ClickTime.NET.Generated.Models.ResponseBodyGet.UserModel_Me.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Update the current user
        /// </summary>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<ClickTime.NET.Generated.Models.ResponseBodyGet.UserModel_Me?> PatchAsync(ClickTime.NET.Generated.Models.Patch.UserModel_Me body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<ClickTime.NET.Generated.Models.ResponseBodyGet.UserModel_Me> PatchAsync(ClickTime.NET.Generated.Models.Patch.UserModel_Me body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPatchRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<ClickTime.NET.Generated.Models.ResponseBodyGet.UserModel_Me>(requestInfo, ClickTime.NET.Generated.Models.ResponseBodyGet.UserModel_Me.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get the current User.
        /// </summary>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default) {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Update the current user
        /// </summary>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPatchRequestInformation(ClickTime.NET.Generated.Models.Patch.UserModel_Me body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToPatchRequestInformation(ClickTime.NET.Generated.Models.Patch.UserModel_Me body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default) {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PATCH, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public MeRequestBuilder WithUrl(string rawUrl) {
            return new MeRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class MeRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters> {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class MeRequestBuilderPatchRequestConfiguration : RequestConfiguration<DefaultQueryParameters> {
        }
    }
}
