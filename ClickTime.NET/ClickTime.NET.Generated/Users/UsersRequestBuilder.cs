// <auto-generated/>
using ClickTime.NET.Generated.Models.Post;
using ClickTime.NET.Generated.Models.ResponseBodyGet;
using ClickTime.NET.Generated.Models.ResponseBodyListGet;
using ClickTime.NET.Generated.Users.CustomFieldDefinitions;
using ClickTime.NET.Generated.Users.Item;
using ClickTime.NET.Generated.Users.New;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace ClickTime.NET.Generated.Users {
    /// <summary>
    /// Builds and executes requests for operations under \Users
    /// </summary>
    public class UsersRequestBuilder : BaseRequestBuilder {
        /// <summary>The CustomFieldDefinitions property</summary>
        public CustomFieldDefinitionsRequestBuilder CustomFieldDefinitions { get =>
            new CustomFieldDefinitionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The new property</summary>
        public NewRequestBuilder New { get =>
            new NewRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the ClickTime.NET.Generated.Users.item collection</summary>
        /// <param name="position">    Required</param>
        public WithUserItemRequestBuilder this[string position] { get {
            var urlTplParams = new Dictionary<string, object>(PathParameters);
            urlTplParams.Add("userID", position);
            return new WithUserItemRequestBuilder(urlTplParams, RequestAdapter);
        } }
        /// <summary>
        /// Instantiates a new UsersRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public UsersRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/Users{?ID*,Name*,Email*,DivisionID*,TimesheetApproverID*,ExpenseApproverID*,EmploymentTypeID*,JobID*,SecurityLevel*,ManagerPermission*,IsActive*,WithPermission*,SubjectToTimesheetCompletion*,limit*,offset*}", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new UsersRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public UsersRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/Users{?ID*,Name*,Email*,DivisionID*,TimesheetApproverID*,ExpenseApproverID*,EmploymentTypeID*,JobID*,SecurityLevel*,ManagerPermission*,IsActive*,WithPermission*,SubjectToTimesheetCompletion*,limit*,offset*}", rawUrl) {
        }
        /// <summary>
        ///   User requirements:User must be a Manager or an Admin.---# Sort Order:1. Name
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<ClickTime.NET.Generated.Models.ResponseBodyListGet.UserModel_Root?> GetAsync(Action<RequestConfiguration<UsersRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<ClickTime.NET.Generated.Models.ResponseBodyListGet.UserModel_Root> GetAsync(Action<RequestConfiguration<UsersRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<ClickTime.NET.Generated.Models.ResponseBodyListGet.UserModel_Root>(requestInfo, ClickTime.NET.Generated.Models.ResponseBodyListGet.UserModel_Root.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        ///   User requirements:Admin, or Manager with permissions to Add/Edit People (all Divisions).
        /// </summary>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<ClickTime.NET.Generated.Models.ResponseBodyGet.UserModel_Root?> PostAsync(ClickTime.NET.Generated.Models.Post.UserModel_Root body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<ClickTime.NET.Generated.Models.ResponseBodyGet.UserModel_Root> PostAsync(ClickTime.NET.Generated.Models.Post.UserModel_Root body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<ClickTime.NET.Generated.Models.ResponseBodyGet.UserModel_Root>(requestInfo, ClickTime.NET.Generated.Models.ResponseBodyGet.UserModel_Root.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        ///   User requirements:User must be a Manager or an Admin.---# Sort Order:1. Name
        /// </summary>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<UsersRequestBuilderGetQueryParameters>>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<UsersRequestBuilderGetQueryParameters>> requestConfiguration = default) {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        ///   User requirements:Admin, or Manager with permissions to Add/Edit People (all Divisions).
        /// </summary>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(ClickTime.NET.Generated.Models.Post.UserModel_Root body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(ClickTime.NET.Generated.Models.Post.UserModel_Root body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default) {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public UsersRequestBuilder WithUrl(string rawUrl) {
            return new UsersRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        ///   User requirements:User must be a Manager or an Admin.---# Sort Order:1. Name
        /// </summary>
        public class UsersRequestBuilderGetQueryParameters {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string[]? DivisionID { get; set; }
#nullable restore
#else
            public string[] DivisionID { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string[]? Email { get; set; }
#nullable restore
#else
            public string[] Email { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string[]? EmploymentTypeID { get; set; }
#nullable restore
#else
            public string[] EmploymentTypeID { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string[]? ExpenseApproverID { get; set; }
#nullable restore
#else
            public string[] ExpenseApproverID { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string[]? ID { get; set; }
#nullable restore
#else
            public string[] ID { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public bool?[]? IsActive { get; set; }
#nullable restore
#else
            public bool?[] IsActive { get; set; }
#endif
            /// <summary>Filters users who, according to your company’s Job List Controls (also referred to as JobRestrictionMethod), have access to one or more of the JobID values provided.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string[]? JobID { get; set; }
#nullable restore
#else
            public string[] JobID { get; set; }
#endif
            [QueryParameter("limit")]
            public int? Limit { get; set; }
            /// <summary>Please note that values for the ManagerPermission filter must be appropriately URL-encoded, e.g. &quot;Add%2FEdit+People&quot;. Possible values for this filter are:            - Add/Edit People            - View People            - Add/Edit Jobs            - View Jobs            - Add/Edit Tasks            - View Tasks            - Add/Edit Clients            - View Clients            - Add/Edit Divisions            - View Divisions            - Add/Edit Employment Types            - View Employment Types            - Add/Edit Expense Types            - View Expense Types            - Add/Edit Payment Types            - View Payment Types            - Add/Edit Billingrates            - View Billingrates            - Add/Edit Costs            - View Costs            - Add/Edit Resource Management            - View Resource Management            - Review Expenses            - Approve Expenses            - Override Expenses            - Mark Expenses as Paid            - Review timesheets            - Lock timesheets            - Override timesheets            - Notify incomplete            - Run Company Reports            - Approve Time Off            - Is Project Limited</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string[]? ManagerPermission { get; set; }
#nullable restore
#else
            public string[] ManagerPermission { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string[]? Name { get; set; }
#nullable restore
#else
            public string[] Name { get; set; }
#endif
            [QueryParameter("offset")]
            public int? Offset { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string[]? SecurityLevel { get; set; }
#nullable restore
#else
            public string[] SecurityLevel { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public bool?[]? SubjectToTimesheetCompletion { get; set; }
#nullable restore
#else
            public bool?[] SubjectToTimesheetCompletion { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string[]? TimesheetApproverID { get; set; }
#nullable restore
#else
            public string[] TimesheetApproverID { get; set; }
#endif
            /// <summary>Filter Users in Divisions for which you have the specified permission. Possible values are the same as for the ManagerPermission filter above. The Users returned may include additional properties not normally visible. See the model definition for details on which additional properties can be seen.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? WithPermission { get; set; }
#nullable restore
#else
            public string WithPermission { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class UsersRequestBuilderGetRequestConfiguration : RequestConfiguration<UsersRequestBuilderGetQueryParameters> {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class UsersRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters> {
        }
    }
}
