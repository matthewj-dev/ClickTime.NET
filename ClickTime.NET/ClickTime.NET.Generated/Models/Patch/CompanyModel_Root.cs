// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ClickTime.NET.Generated.Models.Patch {
    /// <summary>
    /// Company model for PATCH requests.
    /// </summary>
    public class CompanyModel_Root : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The AttestationStatement property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AttestationStatement { get; set; }
#nullable restore
#else
        public string AttestationStatement { get; set; }
#endif
        /// <summary>The ClientTermPlural property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientTermPlural { get; set; }
#nullable restore
#else
        public string ClientTermPlural { get; set; }
#endif
        /// <summary>The ClientTermSingular property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientTermSingular { get; set; }
#nullable restore
#else
        public string ClientTermSingular { get; set; }
#endif
        /// <summary>The CurrencyFormat property</summary>
        public CompanyModel_Root_CurrencyFormat? CurrencyFormat { get; set; }
        /// <summary>The CurrencyISO property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CurrencyISO { get; set; }
#nullable restore
#else
        public string CurrencyISO { get; set; }
#endif
        /// <summary>  Company requirements:Optional module(s): Time Off Management</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ClickTime.NET.Generated.Models.Patch.DefaultTimeOffRequestHoursModel_DefaultTimeOffRequestHoursPerDay_Patch.CompanyModel_Root? DefaultTimeOffRequestHoursPerDay { get; set; }
#nullable restore
#else
        public ClickTime.NET.Generated.Models.Patch.DefaultTimeOffRequestHoursModel_DefaultTimeOffRequestHoursPerDay_Patch.CompanyModel_Root DefaultTimeOffRequestHoursPerDay { get; set; }
#endif
        /// <summary>The DivisionTermPlural property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DivisionTermPlural { get; set; }
#nullable restore
#else
        public string DivisionTermPlural { get; set; }
#endif
        /// <summary>The DivisionTermSingular property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DivisionTermSingular { get; set; }
#nullable restore
#else
        public string DivisionTermSingular { get; set; }
#endif
        /// <summary>The HasNonAllocatedJobs property</summary>
        public bool? HasNonAllocatedJobs { get; set; }
        /// <summary>The JobTermPlural property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? JobTermPlural { get; set; }
#nullable restore
#else
        public string JobTermPlural { get; set; }
#endif
        /// <summary>The JobTermSingular property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? JobTermSingular { get; set; }
#nullable restore
#else
        public string JobTermSingular { get; set; }
#endif
        /// <summary>Gets or sets Lock Date for a company</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LockDate { get; set; }
#nullable restore
#else
        public string LockDate { get; set; }
#endif
        /// <summary>The PhaseTermPlural property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PhaseTermPlural { get; set; }
#nullable restore
#else
        public string PhaseTermPlural { get; set; }
#endif
        /// <summary>The PhaseTermSingular property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PhaseTermSingular { get; set; }
#nullable restore
#else
        public string PhaseTermSingular { get; set; }
#endif
        /// <summary>This property can only be set by Companies with a demo pricing plan. It can only be set to true and, once set, cannot be changed back.</summary>
        public bool? SetupWizardComplete { get; set; }
        /// <summary>The SubPhaseTermPlural property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SubPhaseTermPlural { get; set; }
#nullable restore
#else
        public string SubPhaseTermPlural { get; set; }
#endif
        /// <summary>The SubPhaseTermSingular property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SubPhaseTermSingular { get; set; }
#nullable restore
#else
        public string SubPhaseTermSingular { get; set; }
#endif
        /// <summary>The TaskTermPlural property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TaskTermPlural { get; set; }
#nullable restore
#else
        public string TaskTermPlural { get; set; }
#endif
        /// <summary>The TaskTermSingular property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TaskTermSingular { get; set; }
#nullable restore
#else
        public string TaskTermSingular { get; set; }
#endif
        /// <summary>
        /// Instantiates a new CompanyModel_Root and sets the default values.
        /// </summary>
        public CompanyModel_Root() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static CompanyModel_Root CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new CompanyModel_Root();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"AttestationStatement", n => { AttestationStatement = n.GetStringValue(); } },
                {"ClientTermPlural", n => { ClientTermPlural = n.GetStringValue(); } },
                {"ClientTermSingular", n => { ClientTermSingular = n.GetStringValue(); } },
                {"CurrencyFormat", n => { CurrencyFormat = n.GetEnumValue<CompanyModel_Root_CurrencyFormat>(); } },
                {"CurrencyISO", n => { CurrencyISO = n.GetStringValue(); } },
                {"DefaultTimeOffRequestHoursPerDay", n => { DefaultTimeOffRequestHoursPerDay = n.GetObjectValue<ClickTime.NET.Generated.Models.Patch.DefaultTimeOffRequestHoursModel_DefaultTimeOffRequestHoursPerDay_Patch.CompanyModel_Root>(ClickTime.NET.Generated.Models.Patch.DefaultTimeOffRequestHoursModel_DefaultTimeOffRequestHoursPerDay_Patch.CompanyModel_Root.CreateFromDiscriminatorValue); } },
                {"DivisionTermPlural", n => { DivisionTermPlural = n.GetStringValue(); } },
                {"DivisionTermSingular", n => { DivisionTermSingular = n.GetStringValue(); } },
                {"HasNonAllocatedJobs", n => { HasNonAllocatedJobs = n.GetBoolValue(); } },
                {"JobTermPlural", n => { JobTermPlural = n.GetStringValue(); } },
                {"JobTermSingular", n => { JobTermSingular = n.GetStringValue(); } },
                {"LockDate", n => { LockDate = n.GetStringValue(); } },
                {"PhaseTermPlural", n => { PhaseTermPlural = n.GetStringValue(); } },
                {"PhaseTermSingular", n => { PhaseTermSingular = n.GetStringValue(); } },
                {"SetupWizardComplete", n => { SetupWizardComplete = n.GetBoolValue(); } },
                {"SubPhaseTermPlural", n => { SubPhaseTermPlural = n.GetStringValue(); } },
                {"SubPhaseTermSingular", n => { SubPhaseTermSingular = n.GetStringValue(); } },
                {"TaskTermPlural", n => { TaskTermPlural = n.GetStringValue(); } },
                {"TaskTermSingular", n => { TaskTermSingular = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("AttestationStatement", AttestationStatement);
            writer.WriteStringValue("ClientTermPlural", ClientTermPlural);
            writer.WriteStringValue("ClientTermSingular", ClientTermSingular);
            writer.WriteEnumValue<CompanyModel_Root_CurrencyFormat>("CurrencyFormat", CurrencyFormat);
            writer.WriteStringValue("CurrencyISO", CurrencyISO);
            writer.WriteObjectValue<ClickTime.NET.Generated.Models.Patch.DefaultTimeOffRequestHoursModel_DefaultTimeOffRequestHoursPerDay_Patch.CompanyModel_Root>("DefaultTimeOffRequestHoursPerDay", DefaultTimeOffRequestHoursPerDay);
            writer.WriteStringValue("DivisionTermPlural", DivisionTermPlural);
            writer.WriteStringValue("DivisionTermSingular", DivisionTermSingular);
            writer.WriteBoolValue("HasNonAllocatedJobs", HasNonAllocatedJobs);
            writer.WriteStringValue("JobTermPlural", JobTermPlural);
            writer.WriteStringValue("JobTermSingular", JobTermSingular);
            writer.WriteStringValue("LockDate", LockDate);
            writer.WriteStringValue("PhaseTermPlural", PhaseTermPlural);
            writer.WriteStringValue("PhaseTermSingular", PhaseTermSingular);
            writer.WriteBoolValue("SetupWizardComplete", SetupWizardComplete);
            writer.WriteStringValue("SubPhaseTermPlural", SubPhaseTermPlural);
            writer.WriteStringValue("SubPhaseTermSingular", SubPhaseTermSingular);
            writer.WriteStringValue("TaskTermPlural", TaskTermPlural);
            writer.WriteStringValue("TaskTermSingular", TaskTermSingular);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
