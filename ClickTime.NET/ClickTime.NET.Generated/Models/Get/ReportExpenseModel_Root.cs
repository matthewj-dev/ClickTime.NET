// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ClickTime.NET.Generated.Models.Get {
    public class ReportExpenseModel_Root : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The BillableAmount property</summary>
        public double? BillableAmount { get; set; }
        /// <summary>The CheckNumber property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CheckNumber { get; set; }
#nullable restore
#else
        public string CheckNumber { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientAccountingID { get; set; }
#nullable restore
#else
        public string ClientAccountingID { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
        public int? ClientActive { get; set; }
        /// <summary>The ClientID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientID { get; set; }
#nullable restore
#else
        public string ClientID { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientName { get; set; }
#nullable restore
#else
        public string ClientName { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientNotes { get; set; }
#nullable restore
#else
        public string ClientNotes { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientNumber { get; set; }
#nullable restore
#else
        public string ClientNumber { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientShortName { get; set; }
#nullable restore
#else
        public string ClientShortName { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CurrentExpenseSheetApprovalStatus { get; set; }
#nullable restore
#else
        public string CurrentExpenseSheetApprovalStatus { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DivisionAccountingID { get; set; }
#nullable restore
#else
        public string DivisionAccountingID { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
        public bool? DivisionActive { get; set; }
        /// <summary>The DivisionID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DivisionID { get; set; }
#nullable restore
#else
        public string DivisionID { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DivisionName { get; set; }
#nullable restore
#else
        public string DivisionName { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DivisionNotes { get; set; }
#nullable restore
#else
        public string DivisionNotes { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Email { get; set; }
#nullable restore
#else
        public string Email { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmployeeNumber { get; set; }
#nullable restore
#else
        public string EmployeeNumber { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmploymentTypeName { get; set; }
#nullable restore
#else
        public string EmploymentTypeName { get; set; }
#endif
        /// <summary>The ExpenseDate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExpenseDate { get; set; }
#nullable restore
#else
        public string ExpenseDate { get; set; }
#endif
        /// <summary>The ExpenseItemAmountCurrency property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExpenseItemAmountCurrency { get; set; }
#nullable restore
#else
        public string ExpenseItemAmountCurrency { get; set; }
#endif
        /// <summary>The ExpenseItemCreationDate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExpenseItemCreationDate { get; set; }
#nullable restore
#else
        public string ExpenseItemCreationDate { get; set; }
#endif
        /// <summary>The ExpenseItemDescription property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExpenseItemDescription { get; set; }
#nullable restore
#else
        public string ExpenseItemDescription { get; set; }
#endif
        /// <summary>The ExpenseItemHasForeignCurrency property</summary>
        public bool? ExpenseItemHasForeignCurrency { get; set; }
        /// <summary>The ExpenseItemNotes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExpenseItemNotes { get; set; }
#nullable restore
#else
        public string ExpenseItemNotes { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExpenseSheetApprovalChangedBy { get; set; }
#nullable restore
#else
        public string ExpenseSheetApprovalChangedBy { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExpenseSheetApprovalChangedByUserID { get; set; }
#nullable restore
#else
        public string ExpenseSheetApprovalChangedByUserID { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExpenseSheetApprovalLastChangeDate { get; set; }
#nullable restore
#else
        public string ExpenseSheetApprovalLastChangeDate { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExpenseSheetCreationDate { get; set; }
#nullable restore
#else
        public string ExpenseSheetCreationDate { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExpenseSheetDate { get; set; }
#nullable restore
#else
        public string ExpenseSheetDate { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExpenseSheetDescription { get; set; }
#nullable restore
#else
        public string ExpenseSheetDescription { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
        public bool? ExpenseSheetForeignCurrencyEnabled { get; set; }
        /// <summary>The ExpenseSheetID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExpenseSheetID { get; set; }
#nullable restore
#else
        public string ExpenseSheetID { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExpenseSheetName { get; set; }
#nullable restore
#else
        public string ExpenseSheetName { get; set; }
#endif
        /// <summary>The ExpenseSheetStatus property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExpenseSheetStatus { get; set; }
#nullable restore
#else
        public string ExpenseSheetStatus { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExpenseSheetTrackingID { get; set; }
#nullable restore
#else
        public string ExpenseSheetTrackingID { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExpenseType { get; set; }
#nullable restore
#else
        public string ExpenseType { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExpenseTypeAccountingID { get; set; }
#nullable restore
#else
        public string ExpenseTypeAccountingID { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
        public bool? ExpenseTypeActive { get; set; }
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExpenseTypeDescription { get; set; }
#nullable restore
#else
        public string ExpenseTypeDescription { get; set; }
#endif
        /// <summary>The ExpenseTypeID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExpenseTypeID { get; set; }
#nullable restore
#else
        public string ExpenseTypeID { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExpenseTypeType { get; set; }
#nullable restore
#else
        public string ExpenseTypeType { get; set; }
#endif
        /// <summary>The ForeignCurrencyExchangeRate property</summary>
        public double? ForeignCurrencyExchangeRate { get; set; }
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FullName { get; set; }
#nullable restore
#else
        public string FullName { get; set; }
#endif
        /// <summary>The HasReceipt property</summary>
        public bool? HasReceipt { get; set; }
        /// <summary>The ID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ID { get; set; }
#nullable restore
#else
        public string ID { get; set; }
#endif
        /// <summary>The ItemAmount property</summary>
        public double? ItemAmount { get; set; }
        /// <summary>The ItemBillable property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ItemBillable { get; set; }
#nullable restore
#else
        public string ItemBillable { get; set; }
#endif
        /// <summary>The ItemForeignAmount property</summary>
        public double? ItemForeignAmount { get; set; }
        /// <summary>The ItemForeignCurrency property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ItemForeignCurrency { get; set; }
#nullable restore
#else
        public string ItemForeignCurrency { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? JobAccountingID { get; set; }
#nullable restore
#else
        public string JobAccountingID { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
        public int? JobActive { get; set; }
        /// <summary>The JobID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? JobID { get; set; }
#nullable restore
#else
        public string JobID { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? JobName { get; set; }
#nullable restore
#else
        public string JobName { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? JobNotes { get; set; }
#nullable restore
#else
        public string JobNotes { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? JobNumber { get; set; }
#nullable restore
#else
        public string JobNumber { get; set; }
#endif
        /// <summary>  Request requirements:CTLegacyScramble=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LegacyID { get; set; }
#nullable restore
#else
        public string LegacyID { get; set; }
#endif
        /// <summary>The MileageAmount property</summary>
        public double? MileageAmount { get; set; }
        /// <summary>The MileageRate property</summary>
        public double? MileageRate { get; set; }
        /// <summary>The Paid property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Paid { get; set; }
#nullable restore
#else
        public string Paid { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PaymentType { get; set; }
#nullable restore
#else
        public string PaymentType { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PaymentTypeAccountingID { get; set; }
#nullable restore
#else
        public string PaymentTypeAccountingID { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
        public bool? PaymentTypeActive { get; set; }
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PaymentTypeDescription { get; set; }
#nullable restore
#else
        public string PaymentTypeDescription { get; set; }
#endif
        /// <summary>The PaymentTypeID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PaymentTypeID { get; set; }
#nullable restore
#else
        public string PaymentTypeID { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
        public bool? PaymentTypeReimbursable { get; set; }
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PersonRole { get; set; }
#nullable restore
#else
        public string PersonRole { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreviousExpenseSheetApprovalStatus { get; set; }
#nullable restore
#else
        public string PreviousExpenseSheetApprovalStatus { get; set; }
#endif
        /// <summary>The ReceiptImageURL property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReceiptImageURL { get; set; }
#nullable restore
#else
        public string ReceiptImageURL { get; set; }
#endif
        /// <summary>The Reimbursable property</summary>
        public bool? Reimbursable { get; set; }
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserAccountingID { get; set; }
#nullable restore
#else
        public string UserAccountingID { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserActive { get; set; }
#nullable restore
#else
        public string UserActive { get; set; }
#endif
        /// <summary>The UserID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserID { get; set; }
#nullable restore
#else
        public string UserID { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserNotes { get; set; }
#nullable restore
#else
        public string UserNotes { get; set; }
#endif
        /// <summary>
        /// Instantiates a new ReportExpenseModel_Root and sets the default values.
        /// </summary>
        public ReportExpenseModel_Root() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ReportExpenseModel_Root CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ReportExpenseModel_Root();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"BillableAmount", n => { BillableAmount = n.GetDoubleValue(); } },
                {"CheckNumber", n => { CheckNumber = n.GetStringValue(); } },
                {"ClientAccountingID", n => { ClientAccountingID = n.GetStringValue(); } },
                {"ClientActive", n => { ClientActive = n.GetIntValue(); } },
                {"ClientID", n => { ClientID = n.GetStringValue(); } },
                {"ClientName", n => { ClientName = n.GetStringValue(); } },
                {"ClientNotes", n => { ClientNotes = n.GetStringValue(); } },
                {"ClientNumber", n => { ClientNumber = n.GetStringValue(); } },
                {"ClientShortName", n => { ClientShortName = n.GetStringValue(); } },
                {"CurrentExpenseSheetApprovalStatus", n => { CurrentExpenseSheetApprovalStatus = n.GetStringValue(); } },
                {"DivisionAccountingID", n => { DivisionAccountingID = n.GetStringValue(); } },
                {"DivisionActive", n => { DivisionActive = n.GetBoolValue(); } },
                {"DivisionID", n => { DivisionID = n.GetStringValue(); } },
                {"DivisionName", n => { DivisionName = n.GetStringValue(); } },
                {"DivisionNotes", n => { DivisionNotes = n.GetStringValue(); } },
                {"Email", n => { Email = n.GetStringValue(); } },
                {"EmployeeNumber", n => { EmployeeNumber = n.GetStringValue(); } },
                {"EmploymentTypeName", n => { EmploymentTypeName = n.GetStringValue(); } },
                {"ExpenseDate", n => { ExpenseDate = n.GetStringValue(); } },
                {"ExpenseItemAmountCurrency", n => { ExpenseItemAmountCurrency = n.GetStringValue(); } },
                {"ExpenseItemCreationDate", n => { ExpenseItemCreationDate = n.GetStringValue(); } },
                {"ExpenseItemDescription", n => { ExpenseItemDescription = n.GetStringValue(); } },
                {"ExpenseItemHasForeignCurrency", n => { ExpenseItemHasForeignCurrency = n.GetBoolValue(); } },
                {"ExpenseItemNotes", n => { ExpenseItemNotes = n.GetStringValue(); } },
                {"ExpenseSheetApprovalChangedBy", n => { ExpenseSheetApprovalChangedBy = n.GetStringValue(); } },
                {"ExpenseSheetApprovalChangedByUserID", n => { ExpenseSheetApprovalChangedByUserID = n.GetStringValue(); } },
                {"ExpenseSheetApprovalLastChangeDate", n => { ExpenseSheetApprovalLastChangeDate = n.GetStringValue(); } },
                {"ExpenseSheetCreationDate", n => { ExpenseSheetCreationDate = n.GetStringValue(); } },
                {"ExpenseSheetDate", n => { ExpenseSheetDate = n.GetStringValue(); } },
                {"ExpenseSheetDescription", n => { ExpenseSheetDescription = n.GetStringValue(); } },
                {"ExpenseSheetForeignCurrencyEnabled", n => { ExpenseSheetForeignCurrencyEnabled = n.GetBoolValue(); } },
                {"ExpenseSheetID", n => { ExpenseSheetID = n.GetStringValue(); } },
                {"ExpenseSheetName", n => { ExpenseSheetName = n.GetStringValue(); } },
                {"ExpenseSheetStatus", n => { ExpenseSheetStatus = n.GetStringValue(); } },
                {"ExpenseSheetTrackingID", n => { ExpenseSheetTrackingID = n.GetStringValue(); } },
                {"ExpenseType", n => { ExpenseType = n.GetStringValue(); } },
                {"ExpenseTypeAccountingID", n => { ExpenseTypeAccountingID = n.GetStringValue(); } },
                {"ExpenseTypeActive", n => { ExpenseTypeActive = n.GetBoolValue(); } },
                {"ExpenseTypeDescription", n => { ExpenseTypeDescription = n.GetStringValue(); } },
                {"ExpenseTypeID", n => { ExpenseTypeID = n.GetStringValue(); } },
                {"ExpenseTypeType", n => { ExpenseTypeType = n.GetStringValue(); } },
                {"ForeignCurrencyExchangeRate", n => { ForeignCurrencyExchangeRate = n.GetDoubleValue(); } },
                {"FullName", n => { FullName = n.GetStringValue(); } },
                {"HasReceipt", n => { HasReceipt = n.GetBoolValue(); } },
                {"ID", n => { ID = n.GetStringValue(); } },
                {"ItemAmount", n => { ItemAmount = n.GetDoubleValue(); } },
                {"ItemBillable", n => { ItemBillable = n.GetStringValue(); } },
                {"ItemForeignAmount", n => { ItemForeignAmount = n.GetDoubleValue(); } },
                {"ItemForeignCurrency", n => { ItemForeignCurrency = n.GetStringValue(); } },
                {"JobAccountingID", n => { JobAccountingID = n.GetStringValue(); } },
                {"JobActive", n => { JobActive = n.GetIntValue(); } },
                {"JobID", n => { JobID = n.GetStringValue(); } },
                {"JobName", n => { JobName = n.GetStringValue(); } },
                {"JobNotes", n => { JobNotes = n.GetStringValue(); } },
                {"JobNumber", n => { JobNumber = n.GetStringValue(); } },
                {"LegacyID", n => { LegacyID = n.GetStringValue(); } },
                {"MileageAmount", n => { MileageAmount = n.GetDoubleValue(); } },
                {"MileageRate", n => { MileageRate = n.GetDoubleValue(); } },
                {"Paid", n => { Paid = n.GetStringValue(); } },
                {"PaymentType", n => { PaymentType = n.GetStringValue(); } },
                {"PaymentTypeAccountingID", n => { PaymentTypeAccountingID = n.GetStringValue(); } },
                {"PaymentTypeActive", n => { PaymentTypeActive = n.GetBoolValue(); } },
                {"PaymentTypeDescription", n => { PaymentTypeDescription = n.GetStringValue(); } },
                {"PaymentTypeID", n => { PaymentTypeID = n.GetStringValue(); } },
                {"PaymentTypeReimbursable", n => { PaymentTypeReimbursable = n.GetBoolValue(); } },
                {"PersonRole", n => { PersonRole = n.GetStringValue(); } },
                {"PreviousExpenseSheetApprovalStatus", n => { PreviousExpenseSheetApprovalStatus = n.GetStringValue(); } },
                {"ReceiptImageURL", n => { ReceiptImageURL = n.GetStringValue(); } },
                {"Reimbursable", n => { Reimbursable = n.GetBoolValue(); } },
                {"UserAccountingID", n => { UserAccountingID = n.GetStringValue(); } },
                {"UserActive", n => { UserActive = n.GetStringValue(); } },
                {"UserID", n => { UserID = n.GetStringValue(); } },
                {"UserNotes", n => { UserNotes = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("BillableAmount", BillableAmount);
            writer.WriteStringValue("CheckNumber", CheckNumber);
            writer.WriteStringValue("ClientAccountingID", ClientAccountingID);
            writer.WriteIntValue("ClientActive", ClientActive);
            writer.WriteStringValue("ClientID", ClientID);
            writer.WriteStringValue("ClientName", ClientName);
            writer.WriteStringValue("ClientNotes", ClientNotes);
            writer.WriteStringValue("ClientNumber", ClientNumber);
            writer.WriteStringValue("ClientShortName", ClientShortName);
            writer.WriteStringValue("CurrentExpenseSheetApprovalStatus", CurrentExpenseSheetApprovalStatus);
            writer.WriteStringValue("DivisionAccountingID", DivisionAccountingID);
            writer.WriteBoolValue("DivisionActive", DivisionActive);
            writer.WriteStringValue("DivisionID", DivisionID);
            writer.WriteStringValue("DivisionName", DivisionName);
            writer.WriteStringValue("DivisionNotes", DivisionNotes);
            writer.WriteStringValue("Email", Email);
            writer.WriteStringValue("EmployeeNumber", EmployeeNumber);
            writer.WriteStringValue("EmploymentTypeName", EmploymentTypeName);
            writer.WriteStringValue("ExpenseDate", ExpenseDate);
            writer.WriteStringValue("ExpenseItemAmountCurrency", ExpenseItemAmountCurrency);
            writer.WriteStringValue("ExpenseItemCreationDate", ExpenseItemCreationDate);
            writer.WriteStringValue("ExpenseItemDescription", ExpenseItemDescription);
            writer.WriteBoolValue("ExpenseItemHasForeignCurrency", ExpenseItemHasForeignCurrency);
            writer.WriteStringValue("ExpenseItemNotes", ExpenseItemNotes);
            writer.WriteStringValue("ExpenseSheetApprovalChangedBy", ExpenseSheetApprovalChangedBy);
            writer.WriteStringValue("ExpenseSheetApprovalChangedByUserID", ExpenseSheetApprovalChangedByUserID);
            writer.WriteStringValue("ExpenseSheetApprovalLastChangeDate", ExpenseSheetApprovalLastChangeDate);
            writer.WriteStringValue("ExpenseSheetCreationDate", ExpenseSheetCreationDate);
            writer.WriteStringValue("ExpenseSheetDate", ExpenseSheetDate);
            writer.WriteStringValue("ExpenseSheetDescription", ExpenseSheetDescription);
            writer.WriteBoolValue("ExpenseSheetForeignCurrencyEnabled", ExpenseSheetForeignCurrencyEnabled);
            writer.WriteStringValue("ExpenseSheetID", ExpenseSheetID);
            writer.WriteStringValue("ExpenseSheetName", ExpenseSheetName);
            writer.WriteStringValue("ExpenseSheetStatus", ExpenseSheetStatus);
            writer.WriteStringValue("ExpenseSheetTrackingID", ExpenseSheetTrackingID);
            writer.WriteStringValue("ExpenseType", ExpenseType);
            writer.WriteStringValue("ExpenseTypeAccountingID", ExpenseTypeAccountingID);
            writer.WriteBoolValue("ExpenseTypeActive", ExpenseTypeActive);
            writer.WriteStringValue("ExpenseTypeDescription", ExpenseTypeDescription);
            writer.WriteStringValue("ExpenseTypeID", ExpenseTypeID);
            writer.WriteStringValue("ExpenseTypeType", ExpenseTypeType);
            writer.WriteDoubleValue("ForeignCurrencyExchangeRate", ForeignCurrencyExchangeRate);
            writer.WriteStringValue("FullName", FullName);
            writer.WriteBoolValue("HasReceipt", HasReceipt);
            writer.WriteStringValue("ID", ID);
            writer.WriteDoubleValue("ItemAmount", ItemAmount);
            writer.WriteStringValue("ItemBillable", ItemBillable);
            writer.WriteDoubleValue("ItemForeignAmount", ItemForeignAmount);
            writer.WriteStringValue("ItemForeignCurrency", ItemForeignCurrency);
            writer.WriteStringValue("JobAccountingID", JobAccountingID);
            writer.WriteIntValue("JobActive", JobActive);
            writer.WriteStringValue("JobID", JobID);
            writer.WriteStringValue("JobName", JobName);
            writer.WriteStringValue("JobNotes", JobNotes);
            writer.WriteStringValue("JobNumber", JobNumber);
            writer.WriteStringValue("LegacyID", LegacyID);
            writer.WriteDoubleValue("MileageAmount", MileageAmount);
            writer.WriteDoubleValue("MileageRate", MileageRate);
            writer.WriteStringValue("Paid", Paid);
            writer.WriteStringValue("PaymentType", PaymentType);
            writer.WriteStringValue("PaymentTypeAccountingID", PaymentTypeAccountingID);
            writer.WriteBoolValue("PaymentTypeActive", PaymentTypeActive);
            writer.WriteStringValue("PaymentTypeDescription", PaymentTypeDescription);
            writer.WriteStringValue("PaymentTypeID", PaymentTypeID);
            writer.WriteBoolValue("PaymentTypeReimbursable", PaymentTypeReimbursable);
            writer.WriteStringValue("PersonRole", PersonRole);
            writer.WriteStringValue("PreviousExpenseSheetApprovalStatus", PreviousExpenseSheetApprovalStatus);
            writer.WriteStringValue("ReceiptImageURL", ReceiptImageURL);
            writer.WriteBoolValue("Reimbursable", Reimbursable);
            writer.WriteStringValue("UserAccountingID", UserAccountingID);
            writer.WriteStringValue("UserActive", UserActive);
            writer.WriteStringValue("UserID", UserID);
            writer.WriteStringValue("UserNotes", UserNotes);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
