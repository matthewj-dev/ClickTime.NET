// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ClickTime.NET.Generated.Models.Get {
    public class JobModel_New : IAdditionalDataHolder, IParsable {
        /// <summary>  User requirements:Security Level(s): Admin, Manager (View Jobs)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccountingPackageID { get; set; }
#nullable restore
#else
        public string AccountingPackageID { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>  User requirements:Security Level(s): Admin, Manager (View Billingrates)Security Level(s): Admin, Manager (Add/Edit Jobs)  Company requirements:Billing rate model(s): Job</summary>
        public double? BillingRate { get; set; }
        /// <summary>  User requirements:Security Level(s): Admin, Manager (Add/Edit Jobs)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientID { get; set; }
#nullable restore
#else
        public string ClientID { get; set; }
#endif
        /// <summary>  Company requirements:Custom Fields must be configured for Jobs.  User requirements:Security Level(s): Admin, Manager (Add/Edit Jobs)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public JobModel_New_CustomFields? CustomFields { get; set; }
#nullable restore
#else
        public JobModel_New_CustomFields CustomFields { get; set; }
#endif
        /// <summary>The EndDate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EndDate { get; set; }
#nullable restore
#else
        public string EndDate { get; set; }
#endif
        /// <summary>The ID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ID { get; set; }
#nullable restore
#else
        public string ID { get; set; }
#endif
        /// <summary>  Company requirements:Optional module(s): Resource Management</summary>
        public bool? IncludeInRM { get; set; }
        /// <summary>The IsActive property</summary>
        public bool? IsActive { get; set; }
        /// <summary>  User requirements:Security Level(s): Admin, Manager (Add/Edit Jobs)  Company requirements:Billability by: Job</summary>
        public bool? IsBillable { get; set; }
        /// <summary>  Company requirements:Company must be nonprofit</summary>
        public bool? IsEligibleTimeOffAllocation { get; set; }
        /// <summary>  User requirements:Security Level(s): Admin, Manager (Add/Edit Jobs)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? JobNumber { get; set; }
#nullable restore
#else
        public string JobNumber { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true  User requirements:Security Level(s): Admin, Manager (Add/Edit Jobs)Security Level(s): Admin, Manager (View Billingrates)  Company requirements:Estimation model: Resource Management</summary>
        public double? LifetimeBudget { get; set; }
        /// <summary>The ListDisplayName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ListDisplayName { get; set; }
#nullable restore
#else
        public string ListDisplayName { get; set; }
#endif
        /// <summary>The ListDisplayText property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ListDisplayText { get; set; }
#nullable restore
#else
        public string ListDisplayText { get; set; }
#endif
        /// <summary>The Name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>  User requirements:Security Level(s): Admin, Manager (View Jobs)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Notes { get; set; }
#nullable restore
#else
        public string Notes { get; set; }
#endif
        /// <summary>  User requirements:Security Level(s): Admin, Manager (View Jobs)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProjectManagerID { get; set; }
#nullable restore
#else
        public string ProjectManagerID { get; set; }
#endif
        /// <summary>  User requirements:Security Level(s): Admin, Manager (View Billingrates)Security Level(s): Admin, Manager (Add/Edit Jobs)  Company requirements:Billing rate model(s): Task x Job, User x Job</summary>
        public JobModel_New_SecondaryBillingRateMode? SecondaryBillingRateMode { get; set; }
        /// <summary>The StartDate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StartDate { get; set; }
#nullable restore
#else
        public string StartDate { get; set; }
#endif
        /// <summary>  User requirements:Security Level(s): Admin, Manager (View Jobs for all Jobs)  Company requirements:Job Approvals: enabled</summary>
        public bool? TimeRequiresApproval { get; set; }
        /// <summary>  User requirements:Security Level(s): Admin, Manager (View Billingrates)Security Level(s): Admin, Manager (Add/Edit Jobs)  Company requirements:Billing rate model(s): Job</summary>
        public bool? UseCompanyBillingRate { get; set; }
        /// <summary>
        /// Instantiates a new JobModel_New and sets the default values.
        /// </summary>
        public JobModel_New() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static JobModel_New CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new JobModel_New();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"AccountingPackageID", n => { AccountingPackageID = n.GetStringValue(); } },
                {"BillingRate", n => { BillingRate = n.GetDoubleValue(); } },
                {"ClientID", n => { ClientID = n.GetStringValue(); } },
                {"CustomFields", n => { CustomFields = n.GetObjectValue<JobModel_New_CustomFields>(JobModel_New_CustomFields.CreateFromDiscriminatorValue); } },
                {"EndDate", n => { EndDate = n.GetStringValue(); } },
                {"ID", n => { ID = n.GetStringValue(); } },
                {"IncludeInRM", n => { IncludeInRM = n.GetBoolValue(); } },
                {"IsActive", n => { IsActive = n.GetBoolValue(); } },
                {"IsBillable", n => { IsBillable = n.GetBoolValue(); } },
                {"IsEligibleTimeOffAllocation", n => { IsEligibleTimeOffAllocation = n.GetBoolValue(); } },
                {"JobNumber", n => { JobNumber = n.GetStringValue(); } },
                {"LifetimeBudget", n => { LifetimeBudget = n.GetDoubleValue(); } },
                {"ListDisplayName", n => { ListDisplayName = n.GetStringValue(); } },
                {"ListDisplayText", n => { ListDisplayText = n.GetStringValue(); } },
                {"Name", n => { Name = n.GetStringValue(); } },
                {"Notes", n => { Notes = n.GetStringValue(); } },
                {"ProjectManagerID", n => { ProjectManagerID = n.GetStringValue(); } },
                {"SecondaryBillingRateMode", n => { SecondaryBillingRateMode = n.GetEnumValue<JobModel_New_SecondaryBillingRateMode>(); } },
                {"StartDate", n => { StartDate = n.GetStringValue(); } },
                {"TimeRequiresApproval", n => { TimeRequiresApproval = n.GetBoolValue(); } },
                {"UseCompanyBillingRate", n => { UseCompanyBillingRate = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("AccountingPackageID", AccountingPackageID);
            writer.WriteDoubleValue("BillingRate", BillingRate);
            writer.WriteStringValue("ClientID", ClientID);
            writer.WriteObjectValue<JobModel_New_CustomFields>("CustomFields", CustomFields);
            writer.WriteStringValue("EndDate", EndDate);
            writer.WriteStringValue("ID", ID);
            writer.WriteBoolValue("IncludeInRM", IncludeInRM);
            writer.WriteBoolValue("IsActive", IsActive);
            writer.WriteBoolValue("IsBillable", IsBillable);
            writer.WriteBoolValue("IsEligibleTimeOffAllocation", IsEligibleTimeOffAllocation);
            writer.WriteStringValue("JobNumber", JobNumber);
            writer.WriteDoubleValue("LifetimeBudget", LifetimeBudget);
            writer.WriteStringValue("ListDisplayName", ListDisplayName);
            writer.WriteStringValue("ListDisplayText", ListDisplayText);
            writer.WriteStringValue("Name", Name);
            writer.WriteStringValue("Notes", Notes);
            writer.WriteStringValue("ProjectManagerID", ProjectManagerID);
            writer.WriteEnumValue<JobModel_New_SecondaryBillingRateMode>("SecondaryBillingRateMode", SecondaryBillingRateMode);
            writer.WriteStringValue("StartDate", StartDate);
            writer.WriteBoolValue("TimeRequiresApproval", TimeRequiresApproval);
            writer.WriteBoolValue("UseCompanyBillingRate", UseCompanyBillingRate);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
