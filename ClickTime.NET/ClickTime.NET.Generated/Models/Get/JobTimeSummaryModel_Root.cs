// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ClickTime.NET.Generated.Models.Get {
    public class JobTimeSummaryModel_Root : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The BillableHours property</summary>
        public double? BillableHours { get; set; }
        /// <summary>The Billings property</summary>
        public double? Billings { get; set; }
        /// <summary>The ClientID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientID { get; set; }
#nullable restore
#else
        public string ClientID { get; set; }
#endif
        /// <summary>The ClientName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientName { get; set; }
#nullable restore
#else
        public string ClientName { get; set; }
#endif
        /// <summary>  User requirements:Security Level(s): Admin, Manager (View Costs)</summary>
        public double? Cost { get; set; }
        /// <summary>  Company requirements:Optional module(s): ForecastingEstimation model: Project Insights</summary>
        public double? EstimateBillings { get; set; }
        /// <summary>  Company requirements:Optional module(s): ForecastingEstimation model: Project Insights</summary>
        public double? EstimateHours { get; set; }
        /// <summary>  Company requirements:Optional module(s): ForecastingEstimation model: Project Insights</summary>
        public JobTimeSummaryModel_Root_EstimationType? EstimationType { get; set; }
        /// <summary>The Hours property</summary>
        public double? Hours { get; set; }
        /// <summary>The IsBillable property</summary>
        public bool? IsBillable { get; set; }
        /// <summary>The JobID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? JobID { get; set; }
#nullable restore
#else
        public string JobID { get; set; }
#endif
        /// <summary>The JobIsActive property</summary>
        public bool? JobIsActive { get; set; }
        /// <summary>The JobName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? JobName { get; set; }
#nullable restore
#else
        public string JobName { get; set; }
#endif
        /// <summary>The JobNumber property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? JobNumber { get; set; }
#nullable restore
#else
        public string JobNumber { get; set; }
#endif
        /// <summary>  User requirements:Security Level(s): Admin, Manager (View Costs)</summary>
        public double? Profit { get; set; }
        /// <summary>  User requirements:Security Level(s): Admin, Manager (View Costs)</summary>
        public double? ProfitMargin { get; set; }
        /// <summary>
        /// Instantiates a new JobTimeSummaryModel_Root and sets the default values.
        /// </summary>
        public JobTimeSummaryModel_Root() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static JobTimeSummaryModel_Root CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new JobTimeSummaryModel_Root();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"BillableHours", n => { BillableHours = n.GetDoubleValue(); } },
                {"Billings", n => { Billings = n.GetDoubleValue(); } },
                {"ClientID", n => { ClientID = n.GetStringValue(); } },
                {"ClientName", n => { ClientName = n.GetStringValue(); } },
                {"Cost", n => { Cost = n.GetDoubleValue(); } },
                {"EstimateBillings", n => { EstimateBillings = n.GetDoubleValue(); } },
                {"EstimateHours", n => { EstimateHours = n.GetDoubleValue(); } },
                {"EstimationType", n => { EstimationType = n.GetEnumValue<JobTimeSummaryModel_Root_EstimationType>(); } },
                {"Hours", n => { Hours = n.GetDoubleValue(); } },
                {"IsBillable", n => { IsBillable = n.GetBoolValue(); } },
                {"JobID", n => { JobID = n.GetStringValue(); } },
                {"JobIsActive", n => { JobIsActive = n.GetBoolValue(); } },
                {"JobName", n => { JobName = n.GetStringValue(); } },
                {"JobNumber", n => { JobNumber = n.GetStringValue(); } },
                {"Profit", n => { Profit = n.GetDoubleValue(); } },
                {"ProfitMargin", n => { ProfitMargin = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("BillableHours", BillableHours);
            writer.WriteDoubleValue("Billings", Billings);
            writer.WriteStringValue("ClientID", ClientID);
            writer.WriteStringValue("ClientName", ClientName);
            writer.WriteDoubleValue("Cost", Cost);
            writer.WriteDoubleValue("EstimateBillings", EstimateBillings);
            writer.WriteDoubleValue("EstimateHours", EstimateHours);
            writer.WriteEnumValue<JobTimeSummaryModel_Root_EstimationType>("EstimationType", EstimationType);
            writer.WriteDoubleValue("Hours", Hours);
            writer.WriteBoolValue("IsBillable", IsBillable);
            writer.WriteStringValue("JobID", JobID);
            writer.WriteBoolValue("JobIsActive", JobIsActive);
            writer.WriteStringValue("JobName", JobName);
            writer.WriteStringValue("JobNumber", JobNumber);
            writer.WriteDoubleValue("Profit", Profit);
            writer.WriteDoubleValue("ProfitMargin", ProfitMargin);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
