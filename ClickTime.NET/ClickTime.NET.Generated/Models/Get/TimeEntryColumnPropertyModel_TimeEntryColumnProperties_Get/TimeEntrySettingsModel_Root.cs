// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ClickTime.NET.Generated.Models.Get.TimeEntryColumnPropertyModel_TimeEntryColumnProperties_Get {
    /// <summary>
    /// A list of time entry column properties, such as the column width.
    /// </summary>
    public class TimeEntrySettingsModel_Root : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The width of the column, in pixels.</summary>
        public int? ColumnWidth { get; set; }
        /// <summary>The ID of the custom field definition that this property is for. This should only used when the TimeEntryColumnType is set to &quot;CustomField&quot;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustomFieldDefinitionID { get; set; }
#nullable restore
#else
        public string CustomFieldDefinitionID { get; set; }
#endif
        /// <summary>The type of column this property is for.</summary>
        public TimeEntrySettingsModel_Root_TimeEntryColumnType? TimeEntryColumnType { get; set; }
        /// <summary>
        /// Instantiates a new TimeEntrySettingsModel_Root and sets the default values.
        /// </summary>
        public TimeEntrySettingsModel_Root() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static TimeEntrySettingsModel_Root CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new TimeEntrySettingsModel_Root();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"ColumnWidth", n => { ColumnWidth = n.GetIntValue(); } },
                {"CustomFieldDefinitionID", n => { CustomFieldDefinitionID = n.GetStringValue(); } },
                {"TimeEntryColumnType", n => { TimeEntryColumnType = n.GetEnumValue<TimeEntrySettingsModel_Root_TimeEntryColumnType>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("ColumnWidth", ColumnWidth);
            writer.WriteStringValue("CustomFieldDefinitionID", CustomFieldDefinitionID);
            writer.WriteEnumValue<TimeEntrySettingsModel_Root_TimeEntryColumnType>("TimeEntryColumnType", TimeEntryColumnType);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
