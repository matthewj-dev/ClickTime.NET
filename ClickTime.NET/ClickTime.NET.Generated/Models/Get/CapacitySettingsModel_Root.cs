// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ClickTime.NET.Generated.Models.Get {
    public class CapacitySettingsModel_Root : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The Metric property</summary>
        public CapacitySettingsModel_Root_Metric? Metric { get; set; }
        /// <summary>The SortDirection property</summary>
        public CapacitySettingsModel_Root_SortDirection? SortDirection { get; set; }
        /// <summary>The SortField property</summary>
        public CapacitySettingsModel_Root_SortField? SortField { get; set; }
        /// <summary>The SortMonth property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SortMonth { get; set; }
#nullable restore
#else
        public string SortMonth { get; set; }
#endif
        /// <summary>The TimeFrame property</summary>
        public CapacitySettingsModel_Root_TimeFrame? TimeFrame { get; set; }
        /// <summary>
        /// Instantiates a new CapacitySettingsModel_Root and sets the default values.
        /// </summary>
        public CapacitySettingsModel_Root() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static CapacitySettingsModel_Root CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new CapacitySettingsModel_Root();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"Metric", n => { Metric = n.GetEnumValue<CapacitySettingsModel_Root_Metric>(); } },
                {"SortDirection", n => { SortDirection = n.GetEnumValue<CapacitySettingsModel_Root_SortDirection>(); } },
                {"SortField", n => { SortField = n.GetEnumValue<CapacitySettingsModel_Root_SortField>(); } },
                {"SortMonth", n => { SortMonth = n.GetStringValue(); } },
                {"TimeFrame", n => { TimeFrame = n.GetEnumValue<CapacitySettingsModel_Root_TimeFrame>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<CapacitySettingsModel_Root_Metric>("Metric", Metric);
            writer.WriteEnumValue<CapacitySettingsModel_Root_SortDirection>("SortDirection", SortDirection);
            writer.WriteEnumValue<CapacitySettingsModel_Root_SortField>("SortField", SortField);
            writer.WriteStringValue("SortMonth", SortMonth);
            writer.WriteEnumValue<CapacitySettingsModel_Root_TimeFrame>("TimeFrame", TimeFrame);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
