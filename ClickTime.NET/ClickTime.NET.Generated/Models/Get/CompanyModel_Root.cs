// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ClickTime.NET.Generated.Models.Get {
    public class CompanyModel_Root : IAdditionalDataHolder, IParsable {
        /// <summary>The AccountingApplication property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccountingApplication { get; set; }
#nullable restore
#else
        public string AccountingApplication { get; set; }
#endif
        /// <summary>The AccountNumber property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccountNumber { get; set; }
#nullable restore
#else
        public string AccountNumber { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>  Company requirements:Optional module(s): TimesheetApprovals, Expenses</summary>
        public bool? AllowManagerUnapproval { get; set; }
        /// <summary>The AllowWorkedTimeEntryInFuture property</summary>
        public bool? AllowWorkedTimeEntryInFuture { get; set; }
        /// <summary>The AllowZeroHourTimeEntries property</summary>
        public bool? AllowZeroHourTimeEntries { get; set; }
        /// <summary>The AttestationStatement property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AttestationStatement { get; set; }
#nullable restore
#else
        public string AttestationStatement { get; set; }
#endif
        /// <summary>The AuditLoggingEnabled property</summary>
        public bool? AuditLoggingEnabled { get; set; }
        /// <summary>The BillableSetting property</summary>
        public CompanyModel_Root_BillableSetting? BillableSetting { get; set; }
        /// <summary>The BillingRateModel property</summary>
        public CompanyModel_Root_BillingRateModel? BillingRateModel { get; set; }
        /// <summary>The CheckingAccountName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CheckingAccountName { get; set; }
#nullable restore
#else
        public string CheckingAccountName { get; set; }
#endif
        /// <summary>The ClientTermPlural property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientTermPlural { get; set; }
#nullable restore
#else
        public string ClientTermPlural { get; set; }
#endif
        /// <summary>The ClientTermSingular property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientTermSingular { get; set; }
#nullable restore
#else
        public string ClientTermSingular { get; set; }
#endif
        /// <summary>The CurrencyFormat property</summary>
        public CompanyModel_Root_CurrencyFormat? CurrencyFormat { get; set; }
        /// <summary>The CurrencyISO property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CurrencyISO { get; set; }
#nullable restore
#else
        public string CurrencyISO { get; set; }
#endif
        /// <summary>The CurrencyName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CurrencyName { get; set; }
#nullable restore
#else
        public string CurrencyName { get; set; }
#endif
        /// <summary>The CurrencySymbol property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CurrencySymbol { get; set; }
#nullable restore
#else
        public string CurrencySymbol { get; set; }
#endif
        /// <summary>  Company requirements:Custom Fields must be configured for the Company.  User requirements:Security Level(s): Admin</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public CompanyModel_Root_CustomFields? CustomFields { get; set; }
#nullable restore
#else
        public CompanyModel_Root_CustomFields CustomFields { get; set; }
#endif
        /// <summary>The DateSetting property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DateSetting { get; set; }
#nullable restore
#else
        public string DateSetting { get; set; }
#endif
        /// <summary>The DCAALogEnabled property</summary>
        public bool? DCAALogEnabled { get; set; }
        /// <summary>The DefaultBillingRate property</summary>
        public double? DefaultBillingRate { get; set; }
        /// <summary>  Company requirements:Optional module(s): Time Off Management</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ClickTime.NET.Generated.Models.Get.DefaultTimeOffRequestHoursModel_DefaultTimeOffRequestHoursPerDay_Get.CompanyModel_Root? DefaultTimeOffRequestHoursPerDay { get; set; }
#nullable restore
#else
        public ClickTime.NET.Generated.Models.Get.DefaultTimeOffRequestHoursModel_DefaultTimeOffRequestHoursPerDay_Get.CompanyModel_Root DefaultTimeOffRequestHoursPerDay { get; set; }
#endif
        /// <summary>The DisplayClientSelector property</summary>
        public bool? DisplayClientSelector { get; set; }
        /// <summary>The DisplayTaskSelector property</summary>
        public bool? DisplayTaskSelector { get; set; }
        /// <summary>The DivisionTermPlural property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DivisionTermPlural { get; set; }
#nullable restore
#else
        public string DivisionTermPlural { get; set; }
#endif
        /// <summary>The DivisionTermSingular property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DivisionTermSingular { get; set; }
#nullable restore
#else
        public string DivisionTermSingular { get; set; }
#endif
        /// <summary>The EnableProjectApprovals property</summary>
        public bool? EnableProjectApprovals { get; set; }
        /// <summary>The EnableProjectEstimationFeatures property</summary>
        public bool? EnableProjectEstimationFeatures { get; set; }
        /// <summary>The EnableTimeBillingFeatures property</summary>
        public bool? EnableTimeBillingFeatures { get; set; }
        /// <summary>The EstimationModel property</summary>
        public CompanyModel_Root_EstimationModel? EstimationModel { get; set; }
        /// <summary>The GDPRComplianceMethod property</summary>
        public CompanyModel_Root_GDPRComplianceMethod? GDPRComplianceMethod { get; set; }
        /// <summary>The HasNonAllocatedJobs property</summary>
        public bool? HasNonAllocatedJobs { get; set; }
        /// <summary>The ID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ID { get; set; }
#nullable restore
#else
        public string ID { get; set; }
#endif
        /// <summary>The IsActive property</summary>
        public bool? IsActive { get; set; }
        /// <summary>The IsTestCompany property</summary>
        public bool? IsTestCompany { get; set; }
        /// <summary>The JobRestrictionMethod property</summary>
        public CompanyModel_Root_JobRestrictionMethod? JobRestrictionMethod { get; set; }
        /// <summary>The JobTermPlural property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? JobTermPlural { get; set; }
#nullable restore
#else
        public string JobTermPlural { get; set; }
#endif
        /// <summary>The JobTermSingular property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? JobTermSingular { get; set; }
#nullable restore
#else
        public string JobTermSingular { get; set; }
#endif
        /// <summary>  Request requirements:CTLegacyScramble=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LegacyID { get; set; }
#nullable restore
#else
        public string LegacyID { get; set; }
#endif
        /// <summary>The LockDate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LockDate { get; set; }
#nullable restore
#else
        public string LockDate { get; set; }
#endif
        /// <summary>The MileageUnit property</summary>
        public CompanyModel_Root_MileageUnit? MileageUnit { get; set; }
        /// <summary>The MinTimeIncrement property</summary>
        public double? MinTimeIncrement { get; set; }
        /// <summary>The Name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The OptionalModules property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public CompanyModel_Root_OptionalModules? OptionalModules { get; set; }
#nullable restore
#else
        public CompanyModel_Root_OptionalModules OptionalModules { get; set; }
#endif
        /// <summary>The PayrollApplication property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PayrollApplication { get; set; }
#nullable restore
#else
        public string PayrollApplication { get; set; }
#endif
        /// <summary>The PhasesEnabled property</summary>
        public bool? PhasesEnabled { get; set; }
        /// <summary>The PhaseTermPlural property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PhaseTermPlural { get; set; }
#nullable restore
#else
        public string PhaseTermPlural { get; set; }
#endif
        /// <summary>The PhaseTermSingular property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PhaseTermSingular { get; set; }
#nullable restore
#else
        public string PhaseTermSingular { get; set; }
#endif
        /// <summary>The PrecisionForHoursValues property</summary>
        public int? PrecisionForHoursValues { get; set; }
        /// <summary>The SetupWizardComplete property</summary>
        public bool? SetupWizardComplete { get; set; }
        /// <summary>The StartDate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StartDate { get; set; }
#nullable restore
#else
        public string StartDate { get; set; }
#endif
        /// <summary>The SubPhasesEnabled property</summary>
        public bool? SubPhasesEnabled { get; set; }
        /// <summary>The SubPhaseTermPlural property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SubPhaseTermPlural { get; set; }
#nullable restore
#else
        public string SubPhaseTermPlural { get; set; }
#endif
        /// <summary>The SubPhaseTermSingular property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SubPhaseTermSingular { get; set; }
#nullable restore
#else
        public string SubPhaseTermSingular { get; set; }
#endif
        /// <summary>The TaskRestrictionMethod property</summary>
        public CompanyModel_Root_TaskRestrictionMethod? TaskRestrictionMethod { get; set; }
        /// <summary>The TaskTermPlural property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TaskTermPlural { get; set; }
#nullable restore
#else
        public string TaskTermPlural { get; set; }
#endif
        /// <summary>The TaskTermSingular property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TaskTermSingular { get; set; }
#nullable restore
#else
        public string TaskTermSingular { get; set; }
#endif
        /// <summary>The TimeOffTypeRestrictionMethod property</summary>
        public CompanyModel_Root_TimeOffTypeRestrictionMethod? TimeOffTypeRestrictionMethod { get; set; }
        /// <summary>The TimesheetModel property</summary>
        public CompanyModel_Root_TimesheetModel? TimesheetModel { get; set; }
        /// <summary>  Company requirements:Timesheet model: custom</summary>
        public int? TimesheetModelCustomNumberOfDays { get; set; }
        /// <summary>The UserIDNotifiedOfExpenseSheetsWaitingForPayment property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserIDNotifiedOfExpenseSheetsWaitingForPayment { get; set; }
#nullable restore
#else
        public string UserIDNotifiedOfExpenseSheetsWaitingForPayment { get; set; }
#endif
        /// <summary>  Request requirements:Verbose=true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ClickTime.NET.Generated.Models.Get.BasicUserModel_UserNotifiedOfExpenseSheetsWaitingForPayment_Get.CompanyModel_Root? UserNotifiedOfExpenseSheetsWaitingForPayment { get; set; }
#nullable restore
#else
        public ClickTime.NET.Generated.Models.Get.BasicUserModel_UserNotifiedOfExpenseSheetsWaitingForPayment_Get.CompanyModel_Root UserNotifiedOfExpenseSheetsWaitingForPayment { get; set; }
#endif
        /// <summary>The WeekStartsOn property</summary>
        public CompanyModel_Root_WeekStartsOn? WeekStartsOn { get; set; }
        /// <summary>
        /// Instantiates a new CompanyModel_Root and sets the default values.
        /// </summary>
        public CompanyModel_Root() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static CompanyModel_Root CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new CompanyModel_Root();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"AccountNumber", n => { AccountNumber = n.GetStringValue(); } },
                {"AccountingApplication", n => { AccountingApplication = n.GetStringValue(); } },
                {"AllowManagerUnapproval", n => { AllowManagerUnapproval = n.GetBoolValue(); } },
                {"AllowWorkedTimeEntryInFuture", n => { AllowWorkedTimeEntryInFuture = n.GetBoolValue(); } },
                {"AllowZeroHourTimeEntries", n => { AllowZeroHourTimeEntries = n.GetBoolValue(); } },
                {"AttestationStatement", n => { AttestationStatement = n.GetStringValue(); } },
                {"AuditLoggingEnabled", n => { AuditLoggingEnabled = n.GetBoolValue(); } },
                {"BillableSetting", n => { BillableSetting = n.GetEnumValue<CompanyModel_Root_BillableSetting>(); } },
                {"BillingRateModel", n => { BillingRateModel = n.GetEnumValue<CompanyModel_Root_BillingRateModel>(); } },
                {"CheckingAccountName", n => { CheckingAccountName = n.GetStringValue(); } },
                {"ClientTermPlural", n => { ClientTermPlural = n.GetStringValue(); } },
                {"ClientTermSingular", n => { ClientTermSingular = n.GetStringValue(); } },
                {"CurrencyFormat", n => { CurrencyFormat = n.GetEnumValue<CompanyModel_Root_CurrencyFormat>(); } },
                {"CurrencyISO", n => { CurrencyISO = n.GetStringValue(); } },
                {"CurrencyName", n => { CurrencyName = n.GetStringValue(); } },
                {"CurrencySymbol", n => { CurrencySymbol = n.GetStringValue(); } },
                {"CustomFields", n => { CustomFields = n.GetObjectValue<CompanyModel_Root_CustomFields>(CompanyModel_Root_CustomFields.CreateFromDiscriminatorValue); } },
                {"DCAALogEnabled", n => { DCAALogEnabled = n.GetBoolValue(); } },
                {"DateSetting", n => { DateSetting = n.GetStringValue(); } },
                {"DefaultBillingRate", n => { DefaultBillingRate = n.GetDoubleValue(); } },
                {"DefaultTimeOffRequestHoursPerDay", n => { DefaultTimeOffRequestHoursPerDay = n.GetObjectValue<ClickTime.NET.Generated.Models.Get.DefaultTimeOffRequestHoursModel_DefaultTimeOffRequestHoursPerDay_Get.CompanyModel_Root>(ClickTime.NET.Generated.Models.Get.DefaultTimeOffRequestHoursModel_DefaultTimeOffRequestHoursPerDay_Get.CompanyModel_Root.CreateFromDiscriminatorValue); } },
                {"DisplayClientSelector", n => { DisplayClientSelector = n.GetBoolValue(); } },
                {"DisplayTaskSelector", n => { DisplayTaskSelector = n.GetBoolValue(); } },
                {"DivisionTermPlural", n => { DivisionTermPlural = n.GetStringValue(); } },
                {"DivisionTermSingular", n => { DivisionTermSingular = n.GetStringValue(); } },
                {"EnableProjectApprovals", n => { EnableProjectApprovals = n.GetBoolValue(); } },
                {"EnableProjectEstimationFeatures", n => { EnableProjectEstimationFeatures = n.GetBoolValue(); } },
                {"EnableTimeBillingFeatures", n => { EnableTimeBillingFeatures = n.GetBoolValue(); } },
                {"EstimationModel", n => { EstimationModel = n.GetEnumValue<CompanyModel_Root_EstimationModel>(); } },
                {"GDPRComplianceMethod", n => { GDPRComplianceMethod = n.GetEnumValue<CompanyModel_Root_GDPRComplianceMethod>(); } },
                {"HasNonAllocatedJobs", n => { HasNonAllocatedJobs = n.GetBoolValue(); } },
                {"ID", n => { ID = n.GetStringValue(); } },
                {"IsActive", n => { IsActive = n.GetBoolValue(); } },
                {"IsTestCompany", n => { IsTestCompany = n.GetBoolValue(); } },
                {"JobRestrictionMethod", n => { JobRestrictionMethod = n.GetEnumValue<CompanyModel_Root_JobRestrictionMethod>(); } },
                {"JobTermPlural", n => { JobTermPlural = n.GetStringValue(); } },
                {"JobTermSingular", n => { JobTermSingular = n.GetStringValue(); } },
                {"LegacyID", n => { LegacyID = n.GetStringValue(); } },
                {"LockDate", n => { LockDate = n.GetStringValue(); } },
                {"MileageUnit", n => { MileageUnit = n.GetEnumValue<CompanyModel_Root_MileageUnit>(); } },
                {"MinTimeIncrement", n => { MinTimeIncrement = n.GetDoubleValue(); } },
                {"Name", n => { Name = n.GetStringValue(); } },
                {"OptionalModules", n => { OptionalModules = n.GetObjectValue<CompanyModel_Root_OptionalModules>(CompanyModel_Root_OptionalModules.CreateFromDiscriminatorValue); } },
                {"PayrollApplication", n => { PayrollApplication = n.GetStringValue(); } },
                {"PhaseTermPlural", n => { PhaseTermPlural = n.GetStringValue(); } },
                {"PhaseTermSingular", n => { PhaseTermSingular = n.GetStringValue(); } },
                {"PhasesEnabled", n => { PhasesEnabled = n.GetBoolValue(); } },
                {"PrecisionForHoursValues", n => { PrecisionForHoursValues = n.GetIntValue(); } },
                {"SetupWizardComplete", n => { SetupWizardComplete = n.GetBoolValue(); } },
                {"StartDate", n => { StartDate = n.GetStringValue(); } },
                {"SubPhaseTermPlural", n => { SubPhaseTermPlural = n.GetStringValue(); } },
                {"SubPhaseTermSingular", n => { SubPhaseTermSingular = n.GetStringValue(); } },
                {"SubPhasesEnabled", n => { SubPhasesEnabled = n.GetBoolValue(); } },
                {"TaskRestrictionMethod", n => { TaskRestrictionMethod = n.GetEnumValue<CompanyModel_Root_TaskRestrictionMethod>(); } },
                {"TaskTermPlural", n => { TaskTermPlural = n.GetStringValue(); } },
                {"TaskTermSingular", n => { TaskTermSingular = n.GetStringValue(); } },
                {"TimeOffTypeRestrictionMethod", n => { TimeOffTypeRestrictionMethod = n.GetEnumValue<CompanyModel_Root_TimeOffTypeRestrictionMethod>(); } },
                {"TimesheetModel", n => { TimesheetModel = n.GetEnumValue<CompanyModel_Root_TimesheetModel>(); } },
                {"TimesheetModelCustomNumberOfDays", n => { TimesheetModelCustomNumberOfDays = n.GetIntValue(); } },
                {"UserIDNotifiedOfExpenseSheetsWaitingForPayment", n => { UserIDNotifiedOfExpenseSheetsWaitingForPayment = n.GetStringValue(); } },
                {"UserNotifiedOfExpenseSheetsWaitingForPayment", n => { UserNotifiedOfExpenseSheetsWaitingForPayment = n.GetObjectValue<ClickTime.NET.Generated.Models.Get.BasicUserModel_UserNotifiedOfExpenseSheetsWaitingForPayment_Get.CompanyModel_Root>(ClickTime.NET.Generated.Models.Get.BasicUserModel_UserNotifiedOfExpenseSheetsWaitingForPayment_Get.CompanyModel_Root.CreateFromDiscriminatorValue); } },
                {"WeekStartsOn", n => { WeekStartsOn = n.GetEnumValue<CompanyModel_Root_WeekStartsOn>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("AccountingApplication", AccountingApplication);
            writer.WriteStringValue("AccountNumber", AccountNumber);
            writer.WriteBoolValue("AllowManagerUnapproval", AllowManagerUnapproval);
            writer.WriteBoolValue("AllowWorkedTimeEntryInFuture", AllowWorkedTimeEntryInFuture);
            writer.WriteBoolValue("AllowZeroHourTimeEntries", AllowZeroHourTimeEntries);
            writer.WriteStringValue("AttestationStatement", AttestationStatement);
            writer.WriteBoolValue("AuditLoggingEnabled", AuditLoggingEnabled);
            writer.WriteEnumValue<CompanyModel_Root_BillableSetting>("BillableSetting", BillableSetting);
            writer.WriteEnumValue<CompanyModel_Root_BillingRateModel>("BillingRateModel", BillingRateModel);
            writer.WriteStringValue("CheckingAccountName", CheckingAccountName);
            writer.WriteStringValue("ClientTermPlural", ClientTermPlural);
            writer.WriteStringValue("ClientTermSingular", ClientTermSingular);
            writer.WriteEnumValue<CompanyModel_Root_CurrencyFormat>("CurrencyFormat", CurrencyFormat);
            writer.WriteStringValue("CurrencyISO", CurrencyISO);
            writer.WriteStringValue("CurrencyName", CurrencyName);
            writer.WriteStringValue("CurrencySymbol", CurrencySymbol);
            writer.WriteObjectValue<CompanyModel_Root_CustomFields>("CustomFields", CustomFields);
            writer.WriteStringValue("DateSetting", DateSetting);
            writer.WriteBoolValue("DCAALogEnabled", DCAALogEnabled);
            writer.WriteDoubleValue("DefaultBillingRate", DefaultBillingRate);
            writer.WriteObjectValue<ClickTime.NET.Generated.Models.Get.DefaultTimeOffRequestHoursModel_DefaultTimeOffRequestHoursPerDay_Get.CompanyModel_Root>("DefaultTimeOffRequestHoursPerDay", DefaultTimeOffRequestHoursPerDay);
            writer.WriteBoolValue("DisplayClientSelector", DisplayClientSelector);
            writer.WriteBoolValue("DisplayTaskSelector", DisplayTaskSelector);
            writer.WriteStringValue("DivisionTermPlural", DivisionTermPlural);
            writer.WriteStringValue("DivisionTermSingular", DivisionTermSingular);
            writer.WriteBoolValue("EnableProjectApprovals", EnableProjectApprovals);
            writer.WriteBoolValue("EnableProjectEstimationFeatures", EnableProjectEstimationFeatures);
            writer.WriteBoolValue("EnableTimeBillingFeatures", EnableTimeBillingFeatures);
            writer.WriteEnumValue<CompanyModel_Root_EstimationModel>("EstimationModel", EstimationModel);
            writer.WriteEnumValue<CompanyModel_Root_GDPRComplianceMethod>("GDPRComplianceMethod", GDPRComplianceMethod);
            writer.WriteBoolValue("HasNonAllocatedJobs", HasNonAllocatedJobs);
            writer.WriteStringValue("ID", ID);
            writer.WriteBoolValue("IsActive", IsActive);
            writer.WriteBoolValue("IsTestCompany", IsTestCompany);
            writer.WriteEnumValue<CompanyModel_Root_JobRestrictionMethod>("JobRestrictionMethod", JobRestrictionMethod);
            writer.WriteStringValue("JobTermPlural", JobTermPlural);
            writer.WriteStringValue("JobTermSingular", JobTermSingular);
            writer.WriteStringValue("LegacyID", LegacyID);
            writer.WriteStringValue("LockDate", LockDate);
            writer.WriteEnumValue<CompanyModel_Root_MileageUnit>("MileageUnit", MileageUnit);
            writer.WriteDoubleValue("MinTimeIncrement", MinTimeIncrement);
            writer.WriteStringValue("Name", Name);
            writer.WriteObjectValue<CompanyModel_Root_OptionalModules>("OptionalModules", OptionalModules);
            writer.WriteStringValue("PayrollApplication", PayrollApplication);
            writer.WriteBoolValue("PhasesEnabled", PhasesEnabled);
            writer.WriteStringValue("PhaseTermPlural", PhaseTermPlural);
            writer.WriteStringValue("PhaseTermSingular", PhaseTermSingular);
            writer.WriteIntValue("PrecisionForHoursValues", PrecisionForHoursValues);
            writer.WriteBoolValue("SetupWizardComplete", SetupWizardComplete);
            writer.WriteStringValue("StartDate", StartDate);
            writer.WriteBoolValue("SubPhasesEnabled", SubPhasesEnabled);
            writer.WriteStringValue("SubPhaseTermPlural", SubPhaseTermPlural);
            writer.WriteStringValue("SubPhaseTermSingular", SubPhaseTermSingular);
            writer.WriteEnumValue<CompanyModel_Root_TaskRestrictionMethod>("TaskRestrictionMethod", TaskRestrictionMethod);
            writer.WriteStringValue("TaskTermPlural", TaskTermPlural);
            writer.WriteStringValue("TaskTermSingular", TaskTermSingular);
            writer.WriteEnumValue<CompanyModel_Root_TimeOffTypeRestrictionMethod>("TimeOffTypeRestrictionMethod", TimeOffTypeRestrictionMethod);
            writer.WriteEnumValue<CompanyModel_Root_TimesheetModel>("TimesheetModel", TimesheetModel);
            writer.WriteIntValue("TimesheetModelCustomNumberOfDays", TimesheetModelCustomNumberOfDays);
            writer.WriteStringValue("UserIDNotifiedOfExpenseSheetsWaitingForPayment", UserIDNotifiedOfExpenseSheetsWaitingForPayment);
            writer.WriteObjectValue<ClickTime.NET.Generated.Models.Get.BasicUserModel_UserNotifiedOfExpenseSheetsWaitingForPayment_Get.CompanyModel_Root>("UserNotifiedOfExpenseSheetsWaitingForPayment", UserNotifiedOfExpenseSheetsWaitingForPayment);
            writer.WriteEnumValue<CompanyModel_Root_WeekStartsOn>("WeekStartsOn", WeekStartsOn);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
